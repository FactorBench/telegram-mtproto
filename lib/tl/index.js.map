{"version":3,"sources":["../../src/tl/index.js"],"names":["TypeWriter","debug","Logger","PACKED","apiLayer","mtLayer","Serialization","constructor","mtproto","startMaxLength","api","mtApi","writer","maxLength","reset","Layout","getBytes","typed","getBytesTyped","getBytesPlain","storeMethod","methodName","params","layer","pred","funcs","get","Error","WriteMediator","int","id","hasFlags","flags","storeObject","param","paramName","name","typeClass","fieldObj","isFlag","typeDefaults","has","isVector","Array","isArray","TypeError","length","entries","i","elem","returns","obj","type","field","long","intBytes","bytes","double","bool","substr","itemType","toLowerCase","Object","schema","selectSchema","predicate","isBare","constructorData","charAt","constructors","tlConst","condType","fieldBit","indexOf","split","Deserialization","buffer","override","readInt","ReadMediator","typeBuffer","TypeBuffer","fetchInt","fetchBool","offset","fetchObject","fetchIntBytes","bits","len","next","fetchRawBytes","byteView","byteLength","fetchPacked","compressed","uncompressed","newDeserializer","fetchVector","typeProps","constructorCmp","result","push","string","fallback","index","constructorsIndex","schemaFallback","finded","overrideKey","apply","value","getOffset","fetchEnd","isEnd","TL"],"mappings":";;;;;;;AAQA;;AAqdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAndA;;;;;uBAodSA,U;;;;AA5dT;;;;AACA;;;;AAEA;;AAIA;;;;AAKA;;;;;;AACA,IAAMC,QAAQC,aAAO,IAArB;;AAEA,IAAMC,SAAS,UAAf;;AAOA,IAAIC,iBAAJ;AACA,IAAIC,gBAAJ;;AAEO,MAAMC,aAAN,CAAoB;AAKzBC,cAAY,EAAEC,OAAF,EAAWC,cAAX,EAAZ,EAA0DC,GAA1D,EAAyEC,KAAzE,EAA0F;AAAA,SAJ1FC,MAI0F,GAJrE,IAAIZ,sBAAJ,EAIqE;;AACxF,SAAKU,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;;AAEA,SAAKC,MAAL,CAAYC,SAAZ,GAAwBJ,cAAxB;;AAEA,SAAKG,MAAL,CAAYE,KAAZ;AACA,SAAKN,OAAL,GAAeA,OAAf;AACA,QAAI,CAACJ,QAAL,EACEA,WAAW,IAAIW,gBAAJ,CAAWL,GAAX,CAAX;AACF,QAAI,CAACL,OAAL,EACEA,UAAU,IAAIU,gBAAJ,CAAWJ,KAAX,CAAV;AACH;;AAEDK,WAASC,KAAT,EAA0B;AACxB,QAAIA,KAAJ,EACE,OAAO,KAAKL,MAAL,CAAYM,aAAZ,EAAP,CADF,KAGE,OAAO,KAAKN,MAAL,CAAYO,aAAZ,EAAP;AACH;;AAEDC,cAAYC,UAAZ,EAAgCC,MAAhC,EAAwC;AACtC,QAAMC,QAAQ,KAAKf,OAAL,GACVH,OADU,GAEVD,QAFJ;AAGA,QAAMoB,OAAOD,MAAME,KAAN,CAAYC,GAAZ,CAAgBL,UAAhB,CAAb;AACA,QAAI,CAACG,IAAL,EAAW,MAAM,IAAIG,KAAJ,CAAW,kBAAiBN,UAAW,QAAvC,CAAN;;AAEXO,4BAAcC,GAAd,CAAkB,KAAKjB,MAAvB,EACkB,oBAAW,GAAEY,KAAKM,EAAG,EAArB,CADlB,EAEmB,GAAET,UAAW,MAFhC;AAGA,QAAIG,KAAKO,QAAT,EAAmB;AACjB,UAAMC,QAAQ,sBAASR,IAAT,EAAeF,MAAf,CAAd;AACA,WAAKW,WAAL,CAAiBD,KAAjB,EAAwB,GAAxB,EAA8B,KAAIX,UAAW,WAAUW,KAAM,EAA7D;AACD;AACD,yBAAoBR,KAAKF,MAAzB,kHAAiC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAtBY,KAAsB;;AAC/B,UAAMC,YAAYD,MAAME,IAAxB;AACA,UAAMC,YAAYH,MAAMG,SAAxB;AACA,UAAIC,iBAAJ;AACA,UAAI,CAAC,mBAAIH,SAAJ,EAAeb,MAAf,CAAL,EAA6B;AAC3B,YAAIY,MAAMK,MAAV,EAAkB,SAAlB,KACK,IAAIhB,MAAMiB,YAAN,CAAmBC,GAAnB,CAAuBJ,SAAvB,CAAJ,EACHC,WAAWf,MAAMiB,YAAN,CAAmBd,GAAnB,CAAuBW,SAAvB,CAAX,CADG,KAEA,IAAI,0BAAaA,SAAb,CAAJ,EAA6B;AAChC,kBAAQA,SAAR;AACE,iBAAK,KAAL;AAAYC,yBAAW,CAAX,CAAc;AAC1B;AACA,iBAAK,QAAL;AAAeA,yBAAW,GAAX,CAAgB;AAC/B;AACA,iBAAK,MAAL;AAAaA,yBAAW,IAAX,CAAiB;AAC9B;AANF;AAQD,SATI,MAUA,MAAM,IAAIX,KAAJ,CAAW,UAASN,UAAW,sCAAqCc,SAAU,EAA9E,CAAN;AACN,OAfD,MAeO;AACLG,mBAAWhB,OAAOa,SAAP,CAAX;AACD;AACD,UAAID,MAAMQ,QAAV,EAAoB;AAClB,YAAI,CAACC,MAAMC,OAAN,CAAcN,QAAd,CAAL,EACE,MAAM,IAAIO,SAAJ,CAAe,mBAAkBV,SAAU,OAAMd,UAAW,kBAA9C;AACpB;AACC,gBAAOiB,QAAS,IAAG,OAAOA,QAAS,EAF9B,CAAN;AAGFV,gCAAcC,GAAd,CAAkB,KAAKjB,MAAvB,EAA+B,UAA/B,EAA4C,GAAEuB,SAAU,MAAxD;AACAP,gCAAcC,GAAd,CAAkB,KAAKjB,MAAvB,EAA+B0B,SAASQ,MAAxC,EAAiD,GAAEX,SAAU,SAA7D;AACA,8BAA0BG,SAASS,OAAT,EAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAAW,CAAEC,CAAF,EAAKC,IAAL,CAAX;;AACE,eAAKhB,WAAL,CAAiBgB,IAAjB,EAAuBf,MAAMG,SAA7B,EAAyC,GAAEF,SAAU,IAAGa,CAAE,GAA1D;AADF;AAED,OATD,MAUE,KAAKf,WAAL,CAAiBK,QAAjB,EAA2BJ,MAAMG,SAAjC,EAA6C,KAAIhB,UAAW,IAAGc,SAAU,GAAzE;AACH;AACD;;;;;;;;;;;;;;;;;;;;;;AAsBA,WAAOX,KAAK0B,OAAZ;AACD;AACD;;;;;;;;;AASAjB,cAAYkB,GAAZ,EAAiBC,IAAjB,EAA+BC,KAA/B,EAA8C;AAC5C,YAAQD,IAAR;AACE,WAAK,GAAL;AACA,WAAK,KAAL;AACE,eAAOxB,wBAAcC,GAAd,CAAkB,KAAKjB,MAAvB,EAA+BuC,GAA/B,EAAoCE,KAApC,CAAP;AACF,WAAK,MAAL;AACE,eAAOzB,wBAAc0B,IAAd,CAAmB,KAAK1C,MAAxB,EAAgCuC,GAAhC,EAAqCE,KAArC,CAAP;AACF,WAAK,QAAL;AACE,eAAOzB,wBAAc2B,QAAd,CAAuB,KAAK3C,MAA5B,EAAoCuC,GAApC,EAAyC,GAAzC,EAA8CE,KAA9C,CAAP;AACF,WAAK,QAAL;AACE,eAAOzB,wBAAc2B,QAAd,CAAuB,KAAK3C,MAA5B,EAAoCuC,GAApC,EAAyC,GAAzC,EAA8CE,KAA9C,CAAP;AACF,WAAK,QAAL;AACE,eAAOzB,wBAAc2B,QAAd,CAAuB,KAAK3C,MAA5B,EAAoCuC,GAApC,EAAyC,GAAzC,EAA8CE,KAA9C,CAAP;AACF,WAAK,QAAL;AACE,eAAOzB,wBAAc4B,KAAd,CAAoB,KAAK5C,MAAzB,EAAiCuC,GAAjC,EAAuC,GAAEE,KAAM,SAA/C,CAAP;AACF,WAAK,OAAL;AACE,eAAOzB,wBAAc4B,KAAd,CAAoB,KAAK5C,MAAzB,EAAiCuC,GAAjC,EAAsCE,KAAtC,CAAP;AACF,WAAK,QAAL;AACE,eAAOzB,wBAAc6B,MAAd,CAAqB,KAAK7C,MAA1B,EAAkCuC,GAAlC,EAAuCE,KAAvC,CAAP;AACF,WAAK,MAAL;AACE,eAAOzB,wBAAc8B,IAAd,CAAmB,KAAK9C,MAAxB,EAAgCuC,GAAhC,EAAqCE,KAArC,CAAP;AACF,WAAK,MAAL;AACE;AArBJ;;AAwBA,QAAIV,MAAMC,OAAN,CAAcO,GAAd,CAAJ,EAAwB;AACtB,UAAIC,KAAKO,MAAL,CAAY,CAAZ,EAAe,CAAf,KAAqB,QAAzB,EACE/B,wBAAcC,GAAd,CAAkB,KAAKjB,MAAvB,EAA+B,UAA/B,EAA4C,GAAEyC,KAAM,MAApD,EADF,KAEK,IAAID,KAAKO,MAAL,CAAY,CAAZ,EAAe,CAAf,KAAqB,QAAzB,EAAmC;AACtC,cAAM,IAAIhC,KAAJ,CAAW,uBAAwByB,IAAK,EAAxC,CAAN;AACD;AACD,UAAMQ,WAAWR,KAAKO,MAAL,CAAY,CAAZ,EAAeP,KAAKN,MAAL,GAAc,CAA7B,CAAjB,CANsB,CAM2B;AACjDlB,8BAAcC,GAAd,CAAkB,KAAKjB,MAAvB,EAA+BuC,IAAIL,MAAnC,EAA4C,GAAEO,KAAM,SAApD;AACA,WAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAIG,IAAIL,MAAxB,EAAgCE,GAAhC,EAAqC;AACnC,aAAKf,WAAL,CAAiBkB,IAAIH,CAAJ,CAAjB,EAAyBY,QAAzB,EAAoC,GAAEP,KAAQ,IAAKL,CAAI,GAAvD;AACD;AACD,aAAO,IAAP;AACD,KAZD,MAaK,IAAII,KAAKO,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkBE,WAAlB,MAAmC,QAAvC,EAAiD;AACpD,YAAM,IAAIlC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,QAAI,CAAC,kBAAGmC,MAAH,EAAWX,GAAX,CAAL,EACE,MAAM,IAAIxB,KAAJ,CAAW,2BAA4ByB,IAAK,EAA5C,CAAN;;AAEF,QAAMW,SAASC,aAAa,KAAKxD,OAAlB,EAA2B,KAAKE,GAAhC,EAAqC,KAAKC,KAA1C,CAAf;;AAEA,QAAMsD,YAAYd,IAAI,GAAJ,CAAlB;AACA,QAAIe,SAAS,KAAb;AACA,QAAIC,kBAAkB,KAAtB;AACAD,aAASd,KAAKgB,MAAL,CAAY,CAAZ,KAAkB,GAA3B;AACA,QAAIF,MAAJ,EACEd,OAAOA,KAAKO,MAAL,CAAY,CAAZ,CAAP;;AAGF,0BAAsBI,OAAOM,YAA7B,yHAA2C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAhCC,OAAgC;;AACzC,UAAIA,QAAQL,SAAR,IAAqBA,SAAzB,EAAoC;AAClCE,0BAAkBG,OAAlB;AACA;AACD;AACF;;AAED,QAAI,CAACH,eAAL,EACE,MAAM,IAAIxC,KAAJ,CAAW,gBAAesC,SAAU,QAApC,CAAN;;AAEF,QAAIA,aAAab,IAAjB,EACEc,SAAS,IAAT;;AAEF,QAAI,CAACA,MAAL,EACEtC,wBAAcC,GAAd,CAAkB,KAAKjB,MAAvB,EACkB,oBAAUuD,gBAAgBrC,EAA1B,CADlB,EAEmB,GAAEuB,KAAM,IAAGY,SAAU,MAFxC;;AAIF,QAAIM,iBAAJ;AACA,QAAIC,iBAAJ;;AAEA,0BAAoBL,gBAAgB7C,MAApC,yHAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAjCY,KAAiC;;AAC1CkB,aAAOlB,MAAMkB,IAAb;AACA,UAAIA,KAAKqB,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5BF,mBAAWnB,KAAKsB,KAAL,CAAW,GAAX,CAAX;AACAF,mBAAWD,SAAS,CAAT,EAAYG,KAAZ,CAAkB,GAAlB,CAAX;AACA,YAAI,EAAEvB,IAAIqB,SAAS,CAAT,CAAJ,IAAmB,KAAKA,SAAS,CAAT,CAA1B,CAAJ,EAA4C;AAC1C;AACD;AACDpB,eAAOmB,SAAS,CAAT,CAAP;AACD;;AAED,WAAKtC,WAAL,CAAiBkB,IAAIjB,MAAME,IAAV,CAAjB,EAAkCgB,IAAlC,EAAyC,GAAEC,KAAM,IAAKY,SAAY,IAAK/B,MAAME,IAAO,EAApF;AACD;;AAED,WAAO+B,gBAAgBf,IAAvB;AACD;;AAtMwB;;QAAd9C,a,GAAAA,a;AA0MN,MAAMqE,eAAN,CAAsB;AAM3BpE,cAAYqE,MAAZ,EAA4B,EAAEpE,OAAF,EAAWqE,QAAX,EAA5B,EAA4DnE,GAA5D,EAA2EC,KAA3E,EAA4F;AAAA,SAS5FmE,OAT4F,GASjFzB,KAAD,IAAmB;AAC3B;AACA,aAAO0B,uBAAalD,GAAb,CAAiB,KAAKmD,UAAtB,EAAkC3B,KAAlC,CAAP;AACD,KAZ2F;;AAC1F,SAAK3C,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKkE,QAAL,GAAgBA,QAAhB;;AAEA,SAAKG,UAAL,GAAkB,IAAIC,sBAAJ,CAAeL,MAAf,CAAlB;AACA,SAAKpE,OAAL,GAAeA,OAAf;AACD;;AAOD0E,WAAS7B,QAAgB,EAAzB,EAA6B;AAC3B,WAAO,KAAKyB,OAAL,CAAc,GAAGzB,KAAO,MAAxB,CAAP;AACD;;AAED8B,YAAU9B,QAAgB,EAA1B,EAA8B;AAC5B,QAAML,IAAI,KAAK8B,OAAL,CAAc,GAAGzB,KAAO,OAAxB,CAAV;AACA,YAAQL,CAAR;AACE,WAAK,UAAL;AAAiB,eAAO,IAAP;AACjB,WAAK,UAAL;AAAiB,eAAO,KAAP;AACjB;AAAS;AACP,eAAKgC,UAAL,CAAgBI,MAAhB,IAA0B,CAA1B;AACA,iBAAO,KAAKC,WAAL,CAAiB,QAAjB,EAA2BhC,KAA3B,CAAP;AACD;AANH;AAQD;AACDiC,gBAAcC,IAAd,EAA4BlC,QAAgB,EAA5C,EAAgD;AAC9C,QAAIkC,OAAO,EAAX,EACE,MAAM,IAAI5D,KAAJ,CAAW,iBAAgB4D,IAAK,EAAhC,CAAN;;AAEF,QAAMC,MAAMD,OAAO,CAAnB;;AAEA,QAAM/B,QAAQ,KAAKwB,UAAL,CAAgBS,IAAhB,CAAqBD,GAArB,CAAd;;AAEAvF,UAAO,WAAP,EAAmB,qBAAWuD,KAAX,CAAnB,EAAuC,GAAGH,KAAO,OAAQkC,IAAK,EAA9D;;AAEA,WAAO/B,KAAP;AACD;;AAEDkC,gBAAcF,GAAd,EAAmCnC,QAAgB,EAAnD,EAAuD;AACrD,QAAImC,QAAQ,KAAZ,EAAmB;AACjBA,YAAM,KAAKV,OAAL,CAAc,GAAGzB,KAAO,SAAxB,CAAN;AACA,UAAImC,MAAM,KAAKR,UAAL,CAAgBW,QAAhB,CAAyBC,UAAnC,EACE,MAAM,IAAIjE,KAAJ,CAAW,6BAA8B6D,GAAM,iBAAgB,KAAKR,UAAL,CAAgBW,QAAhB,CAAyBC,UAAW,EAAnG,CAAN;AACH;AACD,QAAMpC,QAAQ,KAAKwB,UAAL,CAAgBS,IAAhB,CAAqBD,GAArB,CAAd;AACAvF,UAAO,WAAP,EAAmB,qBAAWuD,KAAX,CAAnB,EAAsCH,KAAtC;;AAEA,WAAOG,KAAP;AACD;;AAEDqC,cAAYzC,IAAZ,EAAkBC,QAAgB,EAAlC,EAAsC;AACpC,QAAMyC,aAAaf,uBAAavB,KAAb,CAAoB,KAAKwB,UAAzB,EAAsC,GAAE3B,KAAM,iBAA9C,CAAnB;AACA,QAAM0C,eAAe,yBAAeD,UAAf,CAArB;AACA,QAAMlB,SAAS,6BAAmBmB,YAAnB,CAAf;AACA,QAAMC,kBAAkB,IAAIrB,eAAJ,CACtBC,MADsB,EACd;AACNpE,eAAU,KAAKA,OADT;AAENqE,gBAAU,KAAKA;AAFT,KADc,EAKtB,KAAKnE,GALiB,EAKZ,KAAKC,KALO,CAAxB;;AAOA,WAAOqF,gBAAgBX,WAAhB,CAA4BjC,IAA5B,EAAkCC,KAAlC,CAAP;AACD;;AAED4C,cAAY7C,IAAZ,EAA0BC,QAAgB,EAA1C,EAA8C;AAC5C,QAAM6C,YAAY,0BAAa9C,IAAb,CAAlB;AACA,QAAIA,KAAKgB,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;AAC1B,UAAM7D,eAAc,KAAKuE,OAAL,CAAc,GAAEzB,KAAM,MAAtB,CAApB;AACA,UAAM8C,iBAAiB,oBAAU5F,YAAV,CAAvB;;AAEA,UAAI4F,mBAAmBhG,MAAvB,EACE,OAAO,KAAK0F,WAAL,CAAiBzC,IAAjB,EAAuBC,KAAvB,CAAP;AACF,UAAI8C,mBAAmB,UAAvB,EACE,MAAM,IAAIxE,KAAJ,CAAW,8BAA6BpB,YAAY,EAApD,CAAN;AACH;AACD,QAAMiF,MAAM,KAAKV,OAAL,CAAc,GAAEzB,KAAM,SAAtB,CAAZ;AACA,QAAM+C,SAAS,EAAf;AACA,QAAIZ,MAAM,CAAV,EAAa;AACX,UAAM5B,WAAWR,KAAKO,MAAL,CAAY,CAAZ,EAAeP,KAAKN,MAAL,GAAc,CAA7B,CAAjB,CADW,CACsC;AACjD,WAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIwC,GAApB,EAAyBxC,GAAzB;AACEoD,eAAOC,IAAP,CAAY,KAAKhB,WAAL,CAAiBzB,QAAjB,EAA4B,GAAEP,KAAM,IAAGL,CAAE,GAAzC,CAAZ;AADF;AAED;;AAED,WAAOoD,MAAP;AACD;;AAEDf,cAAYjC,IAAZ,EAAkBC,QAAgB,EAAlC,EAAsC;AACpC,YAAQD,IAAR;AACE,WAAK,GAAL;AACA,WAAK,KAAL;AACE,eAAO,KAAK8B,QAAL,CAAc7B,KAAd,CAAP;AACF,WAAK,MAAL;AACE,eAAO0B,uBAAazB,IAAb,CAAkB,KAAK0B,UAAvB,EAAmC3B,KAAnC,CAAP;AACF,WAAK,QAAL;AACE,eAAO,KAAKiC,aAAL,CAAmB,GAAnB,EAAwBjC,KAAxB,CAAP;AACF,WAAK,QAAL;AACE,eAAO,KAAKiC,aAAL,CAAmB,GAAnB,EAAwBjC,KAAxB,CAAP;AACF,WAAK,QAAL;AACE,eAAO,KAAKiC,aAAL,CAAmB,GAAnB,EAAwBjC,KAAxB,CAAP;AACF,WAAK,QAAL;AACE,eAAO0B,uBAAauB,MAAb,CAAoB,KAAKtB,UAAzB,EAAqC3B,KAArC,CAAP;AACF,WAAK,OAAL;AACE,eAAO0B,uBAAavB,KAAb,CAAmB,KAAKwB,UAAxB,EAAoC3B,KAApC,CAAP;AACF,WAAK,QAAL;AACE,eAAO0B,uBAAatB,MAAb,CAAoB,KAAKuB,UAAzB,EAAqC3B,KAArC,CAAP;AACF,WAAK,MAAL;AACE,eAAO,KAAK8B,SAAL,CAAe9B,KAAf,CAAP;AACF,WAAK,MAAL;AACE,eAAO,IAAP;AArBJ;AAuBA,QAAIkD,iBAAJ;AACAlD,YAAQA,SAASD,IAAT,IAAiB,QAAzB;;AAEA;AACA;AACA;AACA,QAAM8C,YAAY,0BAAa9C,IAAb,CAAlB;AACA;;AAEA,QAAI8C,UAAUxD,QAAd,EACE,OAAO,KAAKuD,WAAL,CAAiB7C,IAAjB,EAAuBC,KAAvB,CAAP;;AAEF,QAAMU,SAASC,aAAa,KAAKxD,OAAlB,EAA2B,KAAKE,GAAhC,EAAqC,KAAKC,KAA1C,CAAf;AACA,QAAIsD,YAAY,KAAhB;AACA,QAAIE,kBAAkB,KAAtB;;AAEA,QAAI+B,UAAUhC,MAAd,EACEC,kBAAkB,8BAAaf,IAAb,EAAmBW,MAAnB,CAAlB,CADF,KAEK;AACH,UAAMxD,gBAAc,KAAKuE,OAAL,CAAc,GAAEzB,KAAM,MAAtB,CAApB;AACA,UAAM8C,iBAAiB,oBAAU5F,aAAV,CAAvB;;AAEA,UAAI4F,mBAAmBhG,MAAvB,EACE,OAAO,KAAK0F,WAAL,CAAiBzC,IAAjB,EAAuBC,KAAvB,CAAP;;AAEF,UAAImD,QAAQzC,OAAO0C,iBAAnB;AACA,UAAI,CAACD,KAAL,EAAY;AACVzC,eAAO0C,iBAAP,GAA2BD,QAAQ,EAAnC;AACA,aAAK,IAAIxD,MAAI,CAAb,EAAgBA,MAAIe,OAAOM,YAAP,CAAoBvB,MAAxC,EAAgDE,KAAhD;AACEwD,gBAAMzC,OAAOM,YAAP,CAAoBrB,GAApB,EAAuBlB,EAA7B,IAAmCkB,GAAnC;AADF;AAED;AACD,UAAMA,IAAIwD,MAAML,cAAN,CAAV;AACA,UAAInD,CAAJ,EACEmB,kBAAkBJ,OAAOM,YAAP,CAAoBrB,CAApB,CAAlB;;AAEFuD,iBAAW,KAAX;AACA,UAAI,CAACpC,eAAD,IAAoB,KAAK3D,OAA7B,EAAsC;AACpC,YAAMkG,iBAAiB,KAAKhG,GAA5B;AACA,YAAMiG,SAAS,kCAAiBR,cAAjB,EAAiCO,cAAjC,CAAf;AACA,YAAIC,MAAJ,EAAY;AACVxC,4BAAkBwC,MAAlB;AACA,iBAAO,KAAKnG,OAAZ;AACA+F,qBAAW,IAAX;AACD;AACF;AACD,UAAI,CAACpC,eAAL,EAAsB;AACpB,cAAM,IAAIxC,KAAJ,CAAW,0BAAyBpB,aAAY,IAAG,KAAK2E,QAAL,EAAgB,IAAG,KAAKA,QAAL,EAAgB,EAAtF,CAAN;AACD;AACF;;AAEDjB,gBAAYE,gBAAgBF,SAA5B;;AAEA,QAAMmC,SAAS,EAAE,KAAKnC,SAAP,EAAf;AACA,QAAM2C,cAAc,CAAC,KAAKpG,OAAL,GAAe,KAAf,GAAuB,EAAxB,IAA8ByD,SAAlD;;AAEA,QAAI,KAAKY,QAAL,CAAc+B,WAAd,CAAJ,EAAgC;AAC9B,WAAK/B,QAAL,CAAc+B,WAAd,EAA2BC,KAA3B,CAAiC,IAAjC,EAAuC,CAACT,MAAD,EAAU,GAAE/C,KAAM,IAAGY,SAAU,GAA/B,CAAvC;AACD,KAFD,MAEO;AACL,4BAAoBE,gBAAgB7C,MAApC,yHAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAjCY,KAAiC;;AAC1CkB,eAAOlB,MAAMkB,IAAb;AACA;AACA;AACA,YAAIA,KAAKqB,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5B,cAAMF,WAAWnB,KAAKsB,KAAL,CAAW,GAAX,CAAjB;AACA,cAAMF,WAAWD,SAAS,CAAT,EAAYG,KAAZ,CAAkB,GAAlB,CAAjB;AACA,cAAI,EAAE0B,OAAO5B,SAAS,CAAT,CAAP,IAAsB,KAAKA,SAAS,CAAT,CAA7B,CAAJ,EACE;AACFpB,iBAAOmB,SAAS,CAAT,CAAP;AACD;AACD,YAAMpC,YAAYD,MAAME,IAAxB;AACA,YAAM0E,QAAQ,KAAKzB,WAAL,CAAiBjC,IAAjB,EAAwB,GAAEC,KAAM,IAAGY,SAAU,KAAI9B,SAAU,GAA3D,CAAd;;AAEAiE,eAAOjE,SAAP,IAAoB2E,KAApB;AACD;AACF;;AAED,QAAIP,QAAJ,EACE,KAAK/F,OAAL,GAAe,IAAf;;AAEF,WAAO4F,MAAP;AACD;;AAEDW,cAAY;AACV,WAAO,KAAK/B,UAAL,CAAgBI,MAAvB;AACD;;AAED4B,aAAW;AACT,QAAI,CAAC,KAAKhC,UAAL,CAAgBiC,KAAhB,EAAL,EACE,MAAM,IAAItF,KAAJ,CAAU,iCAAV,CAAN;AACF,WAAO,IAAP;AACD;;AAlN0B;;QAAhBgD,e,GAAAA,e;AAsNb,IAAMX,eAAe,CAACxD,OAAD,EAAmBE,GAAnB,EAAkCC,KAAlC,KAAsDH,UACvEG,KADuE,GAEvED,GAFJ;;AA2BO,IAAMwG,kBAAK,CAACxG,GAAD,EAAgBC,KAAhB,MAAqC;AACrDL,iBAAe,CAAC,EAAEE,UAAU,KAAZ,EAAmBC,iBAAiB,IAApC,CAAyC,SAAzC,KAAuD,EAAxD,KACb,IAAIH,aAAJ,CAAkB,EAAEE,OAAF,EAAWC,cAAX,EAAlB,EAA+CC,GAA/C,EAAoDC,KAApD,CAFmD;AAGrDgE,mBAAiB,CAACC,MAAD,EAAiB,EAAEpE,UAAU,KAAZ,EAAmBqE,WAAW,EAA9B,KAA8C,EAA/D,KACf,IAAIF,eAAJ,CAAoBC,MAApB,EAA4B,EAAEpE,OAAF,EAAWqE,QAAX,EAA5B,EAAmDnE,GAAnD,EAAwDC,KAAxD;AAJmD,CAArC,CAAX;;kBASQuG,E","file":"index.js","sourcesContent":["//@flow\n\nimport is from 'ramda/src/is'\nimport has from 'ramda/src/has'\n\nimport { uintToInt, intToUint, bytesToHex,\n  gzipUncompress, bytesToArrayBuffer, longToInts, lshift32, stringToChars } from '../bin'\n\nimport { WriteMediator, ReadMediator } from './mediator'\nimport Layout, { getFlags, isSimpleType, getTypeProps } from '../layout'\nimport { TypeBuffer, TypeWriter, getNakedType,\n  getString, getTypeConstruct } from './type-buffer'\nimport type { TLSchema, TLConstruct } from './index.h'\n\nimport Logger from '../util/log'\nconst debug = Logger`tl`\n\nconst PACKED = 0x3072cfa1\n\ntype SerialConstruct = {\n  mtproto: boolean,\n  startMaxLength: number\n}\n\nlet apiLayer: Layout\nlet mtLayer: Layout\n\nexport class Serialization {\n  writer: TypeWriter = new TypeWriter()\n  mtproto: boolean\n  api: TLSchema\n  mtApi: TLSchema\n  constructor({ mtproto, startMaxLength }: SerialConstruct, api: TLSchema, mtApi: TLSchema) {\n    this.api = api\n    this.mtApi = mtApi\n\n    this.writer.maxLength = startMaxLength\n\n    this.writer.reset()\n    this.mtproto = mtproto\n    if (!apiLayer)\n      apiLayer = new Layout(api)\n    if (!mtLayer)\n      mtLayer = new Layout(mtApi)\n  }\n\n  getBytes(typed?: boolean) {\n    if (typed)\n      return this.writer.getBytesTyped()\n    else\n      return this.writer.getBytesPlain()\n  }\n\n  storeMethod(methodName: string, params) {\n    const layer = this.mtproto\n      ? mtLayer\n      : apiLayer\n    const pred = layer.funcs.get(methodName)\n    if (!pred) throw new Error(`No method name ${methodName} found`)\n\n    WriteMediator.int(this.writer,\n                      intToUint(`${pred.id}`),\n                      `${methodName}[id]`)\n    if (pred.hasFlags) {\n      const flags = getFlags(pred)(params)\n      this.storeObject(flags, '#', `f ${methodName} #flags ${flags}`)\n    }\n    for (const param of pred.params) {\n      const paramName = param.name\n      const typeClass = param.typeClass\n      let fieldObj\n      if (!has(paramName, params)) {\n        if (param.isFlag) continue\n        else if (layer.typeDefaults.has(typeClass))\n          fieldObj = layer.typeDefaults.get(typeClass)\n        else if (isSimpleType(typeClass)) {\n          switch (typeClass) {\n            case 'int': fieldObj = 0; break\n            // case 'long': fieldObj = 0; break\n            case 'string': fieldObj = ' '; break\n            // case 'double': fieldObj = 0; break\n            case 'true': fieldObj = true; break\n            // case 'bytes': fieldObj = [0]; break\n          }\n        }\n        else throw new Error(`Method ${methodName} did not receive required argument ${paramName}`)\n      } else {\n        fieldObj = params[paramName]\n      }\n      if (param.isVector) {\n        if (!Array.isArray(fieldObj))\n          throw new TypeError(`Vector argument ${paramName} in ${methodName} required Array,`  +\n          //$FlowIssue\n          ` got ${fieldObj} ${typeof fieldObj}`)\n        WriteMediator.int(this.writer, 0x1cb5c415, `${paramName}[id]`)\n        WriteMediator.int(this.writer, fieldObj.length, `${paramName}[count]`)\n        for (const [ i, elem ] of fieldObj.entries())\n          this.storeObject(elem, param.typeClass, `${paramName}[${i}]`)\n      } else\n        this.storeObject(fieldObj, param.typeClass, `f ${methodName}(${paramName})`)\n    }\n    /*let condType\n    let fieldBit\n    for (const param of methodData.params) {\n      let type = param.type\n      if (type.indexOf('?') !== -1) {\n        condType = type.split('?')\n        fieldBit = condType[0].split('.')\n        if (!(params[fieldBit[0]] & 1 << fieldBit[1])) {\n          continue\n        }\n        type = condType[1]\n      }\n      const paramName = param.name\n      const stored = params[paramName]\n      if (!stored)\n        stored = this.emptyOfType(type, schema)\n      if (!stored)\n        throw new Error(`Method ${methodName}.`+\n          ` No value of field ${ param.name } recieved and no Empty of type ${ param.type }`)\n      this.storeObject(stored, type, `f ${methodName}(${paramName})`)\n    }*/\n\n    return pred.returns\n  }\n  /*emptyOfType(ofType, schema: TLSchema) {\n    const resultConstruct = schema.constructors.find(\n      ({ type, predicate }: TLConstruct) =>\n        type === ofType &&\n        predicate.indexOf('Empty') !== -1)\n    return resultConstruct\n      ? { _: resultConstruct.predicate }\n      : null\n  }*/\n  storeObject(obj, type: string, field: string) {\n    switch (type) {\n      case '#':\n      case 'int':\n        return WriteMediator.int(this.writer, obj, field)\n      case 'long':\n        return WriteMediator.long(this.writer, obj, field)\n      case 'int128':\n        return WriteMediator.intBytes(this.writer, obj, 128, field)\n      case 'int256':\n        return WriteMediator.intBytes(this.writer, obj, 256, field)\n      case 'int512':\n        return WriteMediator.intBytes(this.writer, obj, 512, field)\n      case 'string':\n        return WriteMediator.bytes(this.writer, obj, `${field}:string`)\n      case 'bytes':\n        return WriteMediator.bytes(this.writer, obj, field)\n      case 'double':\n        return WriteMediator.double(this.writer, obj, field)\n      case 'Bool':\n        return WriteMediator.bool(this.writer, obj, field)\n      case 'true':\n        return\n    }\n\n    if (Array.isArray(obj)) {\n      if (type.substr(0, 6) == 'Vector')\n        WriteMediator.int(this.writer, 0x1cb5c415, `${field}[id]`)\n      else if (type.substr(0, 6) != 'vector') {\n        throw new Error(`Invalid vector type ${  type}`)\n      }\n      const itemType = type.substr(7, type.length - 8) // for \"Vector<itemType>\"\n      WriteMediator.int(this.writer, obj.length, `${field}[count]`)\n      for (let i = 0; i < obj.length; i++) {\n        this.storeObject(obj[i], itemType, `${field  }[${  i  }]`)\n      }\n      return true\n    }\n    else if (type.substr(0, 6).toLowerCase() == 'vector') {\n      throw new Error('Invalid vector object')\n    }\n\n    if (!is(Object, obj))\n      throw new Error(`Invalid object for type ${  type}`)\n\n    const schema = selectSchema(this.mtproto, this.api, this.mtApi)\n\n    const predicate = obj['_']\n    let isBare = false\n    let constructorData = false\n    isBare = type.charAt(0) == '%'\n    if (isBare)\n      type = type.substr(1)\n\n\n    for (const tlConst of schema.constructors) {\n      if (tlConst.predicate == predicate) {\n        constructorData = tlConst\n        break\n      }\n    }\n\n    if (!constructorData)\n      throw new Error(`No predicate ${predicate} found`)\n\n    if (predicate == type)\n      isBare = true\n\n    if (!isBare)\n      WriteMediator.int(this.writer,\n                        intToUint(constructorData.id),\n                        `${field}.${predicate}[id]`)\n\n    let condType\n    let fieldBit\n\n    for (const param of constructorData.params) {\n      type = param.type\n      if (type.indexOf('?') !== -1) {\n        condType = type.split('?')\n        fieldBit = condType[0].split('.')\n        if (!(obj[fieldBit[0]] & 1 << fieldBit[1])) {\n          continue\n        }\n        type = condType[1]\n      }\n\n      this.storeObject(obj[param.name], type, `${field}.${  predicate  }.${  param.name  }`)\n    }\n\n    return constructorData.type\n  }\n\n}\n\nexport class Deserialization {\n  typeBuffer: TypeBuffer\n  override: Object\n  mtproto: boolean\n  api: TLSchema\n  mtApi: TLSchema\n  constructor(buffer: Buffer, { mtproto, override }: DConfig, api: TLSchema, mtApi: TLSchema) {\n    this.api = api\n    this.mtApi = mtApi\n    this.override = override\n\n    this.typeBuffer = new TypeBuffer(buffer)\n    this.mtproto = mtproto\n  }\n\n  readInt = (field: string) => {\n    // log('int')(field, i.toString(16), i)\n    return ReadMediator.int(this.typeBuffer, field)\n  }\n\n  fetchInt(field: string = '') {\n    return this.readInt(`${ field }:int`)\n  }\n\n  fetchBool(field: string = '') {\n    const i = this.readInt(`${ field }:bool`)\n    switch (i) {\n      case 0x997275b5: return true\n      case 0xbc799737: return false\n      default: {\n        this.typeBuffer.offset -= 4\n        return this.fetchObject('Object', field)\n      }\n    }\n  }\n  fetchIntBytes(bits: number, field: string = '') {\n    if (bits % 32)\n      throw new Error(`Invalid bits: ${bits}`)\n\n    const len = bits / 8\n\n    const bytes = this.typeBuffer.next(len)\n\n    debug(`int bytes`)(bytesToHex(bytes), `${ field }:int${  bits}`)\n\n    return bytes\n  }\n\n  fetchRawBytes(len: number | false, field: string = '') {\n    if (len === false) {\n      len = this.readInt(`${ field }_length`)\n      if (len > this.typeBuffer.byteView.byteLength)\n        throw new Error(`Invalid raw bytes length: ${  len  }, buffer len: ${this.typeBuffer.byteView.byteLength}`)\n    }\n    const bytes = this.typeBuffer.next(len)\n    debug(`raw bytes`)(bytesToHex(bytes), field)\n\n    return bytes\n  }\n\n  fetchPacked(type, field: string = '') {\n    const compressed = ReadMediator.bytes( this.typeBuffer, `${field}[packed_string]`)\n    const uncompressed = gzipUncompress(compressed)\n    const buffer = bytesToArrayBuffer(uncompressed)\n    const newDeserializer = new Deserialization(\n      buffer, {\n        mtproto : this.mtproto,\n        override: this.override\n      },\n      this.api, this.mtApi)\n\n    return newDeserializer.fetchObject(type, field)\n  }\n\n  fetchVector(type: string, field: string = '') {\n    const typeProps = getTypeProps(type)\n    if (type.charAt(0) === 'V') {\n      const constructor = this.readInt(`${field}[id]`)\n      const constructorCmp = uintToInt(constructor)\n\n      if (constructorCmp === PACKED)\n        return this.fetchPacked(type, field)\n      if (constructorCmp !== 0x1cb5c415)\n        throw new Error(`Invalid vector constructor ${constructor}`)\n    }\n    const len = this.readInt(`${field}[count]`)\n    const result = []\n    if (len > 0) {\n      const itemType = type.substr(7, type.length - 8) // for \"Vector<itemType>\"\n      for (let i = 0; i < len; i++)\n        result.push(this.fetchObject(itemType, `${field}[${i}]`))\n    }\n\n    return result\n  }\n\n  fetchObject(type, field: string = '') {\n    switch (type) {\n      case '#':\n      case 'int':\n        return this.fetchInt(field)\n      case 'long':\n        return ReadMediator.long(this.typeBuffer, field)\n      case 'int128':\n        return this.fetchIntBytes(128, field)\n      case 'int256':\n        return this.fetchIntBytes(256, field)\n      case 'int512':\n        return this.fetchIntBytes(512, field)\n      case 'string':\n        return ReadMediator.string(this.typeBuffer, field)\n      case 'bytes':\n        return ReadMediator.bytes(this.typeBuffer, field)\n      case 'double':\n        return ReadMediator.double(this.typeBuffer, field)\n      case 'Bool':\n        return this.fetchBool(field)\n      case 'true':\n        return true\n    }\n    let fallback\n    field = field || type || 'Object'\n\n    // const layer = this.mtproto\n    //   ? mtLayer\n    //   : apiLayer\n    const typeProps = getTypeProps(type)\n    // layer.typesById\n\n    if (typeProps.isVector)\n      return this.fetchVector(type, field)\n\n    const schema = selectSchema(this.mtproto, this.api, this.mtApi)\n    let predicate = false\n    let constructorData = false\n\n    if (typeProps.isBare)\n      constructorData = getNakedType(type, schema)\n    else {\n      const constructor = this.readInt(`${field}[id]`)\n      const constructorCmp = uintToInt(constructor)\n\n      if (constructorCmp === PACKED)\n        return this.fetchPacked(type, field)\n\n      let index = schema.constructorsIndex\n      if (!index) {\n        schema.constructorsIndex = index = {}\n        for (let i = 0; i < schema.constructors.length; i++)\n          index[schema.constructors[i].id] = i\n      }\n      const i = index[constructorCmp]\n      if (i)\n        constructorData = schema.constructors[i]\n\n      fallback = false\n      if (!constructorData && this.mtproto) {\n        const schemaFallback = this.api\n        const finded = getTypeConstruct(constructorCmp, schemaFallback)\n        if (finded) {\n          constructorData = finded\n          delete this.mtproto\n          fallback = true\n        }\n      }\n      if (!constructorData) {\n        throw new Error(`Constructor not found: ${constructor} ${this.fetchInt()} ${this.fetchInt()}`)\n      }\n    }\n\n    predicate = constructorData.predicate\n\n    const result = { '_': predicate }\n    const overrideKey = (this.mtproto ? 'mt_' : '') + predicate\n\n    if (this.override[overrideKey]) {\n      this.override[overrideKey].apply(this, [result, `${field}[${predicate}]`])\n    } else {\n      for (const param of constructorData.params) {\n        type = param.type\n        // if (type === '#' && isNil(result.pFlags))\n        //   result.pFlags = {}\n        if (type.indexOf('?') !== -1) {\n          const condType = type.split('?')\n          const fieldBit = condType[0].split('.')\n          if (!(result[fieldBit[0]] & 1 << fieldBit[1]))\n            continue\n          type = condType[1]\n        }\n        const paramName = param.name\n        const value = this.fetchObject(type, `${field}[${predicate}][${paramName}]`)\n\n        result[paramName] = value\n      }\n    }\n\n    if (fallback)\n      this.mtproto = true\n\n    return result\n  }\n\n  getOffset() {\n    return this.typeBuffer.offset\n  }\n\n  fetchEnd() {\n    if (!this.typeBuffer.isEnd())\n      throw new Error('Fetch end with non-empty buffer')\n    return true\n  }\n\n}\n\nconst selectSchema = (mtproto: boolean, api: TLSchema, mtApi: TLSchema) => mtproto\n  ? mtApi\n  : api\n\ntype DConfig = {\n  mtproto: boolean,\n  override: Object\n}\n\nexport type DeserializationFabric = (\n  buffer: Buffer,\n  config?: {\n    mtproto?: boolean,\n    override?: Object\n  }) => Deserialization\n\nexport type SerializationFabric = (\n  config?: {\n    mtproto?: boolean,\n    startMaxLength?: number\n  }) => Serialization\n\nexport type TLFabric = {\n  Serialization: SerializationFabric,\n  Deserialization: DeserializationFabric\n}\n\nexport const TL = (api: TLSchema, mtApi: TLSchema) => ({\n  Serialization: ({ mtproto = false, startMaxLength = 2048 /* 2Kb */ } = {}) =>\n    new Serialization({ mtproto, startMaxLength }, api, mtApi),\n  Deserialization: (buffer: Buffer, { mtproto = false, override = {} }: DConfig = {}) =>\n    new Deserialization(buffer, { mtproto, override }, api, mtApi)\n})\n\nexport * from './mediator'\nexport { TypeWriter } from './type-buffer'\nexport default TL\n"]}