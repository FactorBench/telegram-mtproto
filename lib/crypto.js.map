{"version":3,"sources":["../src/crypto.js"],"names":["convertIfArray","Array","convertToUint8Array","webWorker","taskID","awaiting","webCrypto","isNode","window","crypto","subtle","webkitSubtle","msCrypto","useWebCrypto","digest","useSha1Crypto","useSha256Crypto","finalizeTask","result","deferred","resolve","isCryptoTask","workerEnable","Worker","error","console","stack","TmpWorker","require","tmpWorker","onmessage","e","data","info","onerror","postMessage","performTaskWorker","task","params","embed","promise","sha1Hash","bytes","bytesTyped","name","then","smartTimeout","immediate","sha1HashSync","sha256Hash","identity","sha256HashSync","aesEncrypt","keyBytes","ivBytes","aesDecrypt","encryptedBytes","factorize","pqPrimeFactorization","modPow","x","y","m","bytesModPow","CryptoWorker"],"mappings":"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","file":"crypto.js","sourcesContent":["import when from 'ramda/src/when'\nimport is from 'ramda/src/is'\nimport identity from 'ramda/src/identity'\nimport has from 'ramda/src/has'\nimport both from 'ramda/src/both'\nimport isNode from 'detect-node'\n\nimport blueDefer from './util/defer'\nimport smartTimeout from './util/smart-timeout'\nimport { convertToUint8Array, sha1HashSync, sha256HashSync,\n  aesEncryptSync, aesDecryptSync, convertToByteArray, convertToArrayBuffer,\n  pqPrimeFactorization, bytesModPow } from './bin'\n\nconst convertIfArray = when(is(Array), convertToUint8Array)\nlet webWorker = null // !isNode\nlet taskID = 0\nconst awaiting = {}\nconst webCrypto = isNode\n  ? false\n  //eslint-disable-next-line\n  : window.crypto.subtle || window.crypto.webkitSubtle //TODO remove browser depends\n  //eslint-disable-next-line\n  || window.msCrypto && window.msCrypto.subtle\nconst useWebCrypto = webCrypto && !!webCrypto.digest\nlet useSha1Crypto = useWebCrypto\nlet useSha256Crypto = useWebCrypto\nconst finalizeTask = (taskID, result) => {\n  const deferred = awaiting[taskID]\n  if (deferred) {\n    // console.log(rework_d_T(), 'CW done')\n    deferred.resolve(result) //TODO Possibly, can be used as\n    delete awaiting[taskID]  //\n  }                          //    deferred = Promise.resolve()\n}                            //    deferred.resolve( result )\n\nconst isCryptoTask = both(has('taskID'), has('result'))\n\n//eslint-disable-next-line\nconst workerEnable = !isNode && window.Worker\nif (workerEnable) {\n  const TmpWorker = require('worker-loader?inline!./worker.js')\n  const tmpWorker = new TmpWorker()\n  // tmpWorker.onmessage = function(event) {\n  //   console.info('CW tmpWorker.onmessage', event && event.data)\n  // }\n  tmpWorker.onmessage = e => {\n    if (e.data === 'ready') {\n      console.info('CW ready')\n    } else if (!isCryptoTask(e.data)) {\n      console.info('Not crypto task', e, e.data)\n      return e\n    } else\n    return webWorker\n      ? finalizeTask(e.data.taskID, e.data.result)\n      : webWorker = tmpWorker\n  }\n\n  tmpWorker.onerror = function(error) {\n    console.error('CW error', error, error.stack)\n    webWorker = false\n  }\n  tmpWorker.postMessage('b')\n  webWorker = tmpWorker\n}\n\nconst performTaskWorker = (task, params, embed) => {\n  // console.log(rework_d_T(), 'CW start', task)\n  const deferred = blueDefer()\n\n  awaiting[taskID] = deferred\n\n  params.task = task\n  params.taskID = taskID\n  ;(embed || webWorker).postMessage(params)\n\n  taskID++\n\n  return deferred.promise\n}\n\nconst sha1Hash = bytes => {\n  if (useSha1Crypto) {\n    // We don't use buffer since typedArray.subarray(...).buffer gives the whole buffer and not sliced one.\n    // webCrypto.digest supports typed array\n    const bytesTyped = convertIfArray(bytes)\n    // console.log(rework_d_T(), 'Native sha1 start')\n    return webCrypto.digest({ name: 'SHA-1' }, bytesTyped).then(digest =>\n      // console.log(rework_d_T(), 'Native sha1 done')\n        digest, e => {\n      console.error('Crypto digest error', e)\n      useSha1Crypto = false\n      return sha1HashSync(bytes)\n    })\n  }\n  return smartTimeout.immediate(sha1HashSync, bytes)\n}\n\nconst sha256Hash = bytes => {\n  if (useSha256Crypto) {\n    const bytesTyped = convertIfArray(bytes)\n    // console.log(rework_d_T(), 'Native sha1 start')\n    return webCrypto.digest({ name: 'SHA-256' }, bytesTyped)\n      .then(identity\n        // console.log(rework_d_T(), 'Native sha1 done')\n        , e => {\n          console.error('Crypto digest error', e)\n          useSha256Crypto = false\n          return sha256HashSync(bytes)\n        })\n  }\n  return smartTimeout.immediate(sha256HashSync, bytes)\n}\n\nconst aesEncrypt = (bytes, keyBytes, ivBytes) =>\n  smartTimeout.immediate(() => convertToArrayBuffer(aesEncryptSync(bytes, keyBytes, ivBytes)))\n\nconst aesDecrypt = (encryptedBytes, keyBytes, ivBytes) =>\n  smartTimeout.immediate(() => convertToArrayBuffer(\n    aesDecryptSync(encryptedBytes, keyBytes, ivBytes)))\n\nconst factorize = bytes => {\n  bytes = convertToByteArray(bytes)\n  return webWorker\n    ? performTaskWorker('factorize', { bytes })\n    : smartTimeout.immediate(pqPrimeFactorization, bytes)\n}\n\nconst modPow = (x, y, m) => webWorker\n  ? performTaskWorker('mod-pow', {\n    x,\n    y,\n    m\n  })\n  : smartTimeout.immediate(bytesModPow, x, y, m)\n\nexport const CryptoWorker = {\n  sha1Hash,\n  sha256Hash,\n  aesEncrypt,\n  aesDecrypt,\n  factorize,\n  modPow\n}\n\nexport default CryptoWorker\n"]}