{"version":3,"sources":["../src/store.js"],"names":["ValueStore","val","get","set","newVal","ValueStoreMap","Map","key","TimeOffset","dcList","AsyncStorage","store","delete","e","remove","keys","map","clr","clear","Promise","resolve","noPrefix","PureStorage"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;AAEO,IAAMA,kCAAa,MAAM;AAC9B,MAAIC,MAAM,IAAV;;AAEA,SAAO;AACLC,SAAK,MAAM,qBAAMD,GAAN,CADN;AAELE,SAAKC,UAAUH,MAAMG;AAFhB,GAAP;AAID,CAPM;;AASA,IAAMC,wCAAgB,MAAM;AACjC,MAAMJ,MAAM,IAAIK,GAAJ,EAAZ;;AAEA,SAAO;AACLJ,SAAKK,OAAO,qBAAMN,IAAIC,GAAJ,CAAQK,GAAR,CAAN,CADP;AAELJ,SAAK,CAACI,GAAD,EAAMH,MAAN,KAAiBH,IAAIE,GAAJ,CAAQI,GAAR,EAAaH,MAAb;AAFjB,GAAP;AAID,CAPM;;AASA,IAAMI,kCAAaR,YAAnB;AACA,IAAMS,0BAASJ,eAAf;;AAcO;AAAA,SAAO,EAAP;AAAA;;AAZP,IAAMK,sCAAe,MAAM;AAChC,MAAMC,QAAQ,IAAIL,GAAJ,EAAd;;AAEA,MAAMJ,MAAMK,OAAOI,MAAMT,GAAN,CAAUK,GAAV,CAAnB;AACA,MAAMJ,MAAM,CAACI,GAAD,EAAMN,GAAN,KAAcU,MAAMR,GAAN,CAAUI,GAAV,EAAeN,GAAf,CAA1B;;AACgC;AAAA,WAAKU,MAAMC,MAAN,CAAaC,CAAb,CAAL;AAAA;;AAAhC,MAAMC,SAASC,QAAQA,KAAKC,GAAL,MAAvB;AACA,MAAMC,MAAM,MAAMN,MAAMO,KAAN,EAAlB;AACA,SAAO;AACLhB,SAAWK,GAAD,IAASY,mBAAQC,OAAR,CAAgBlB,IAAIK,GAAJ,CAAhB,CADd;AAELJ,SAAU,CAACI,GAAD,EAAMN,GAAN,KAAckB,mBAAQC,OAAR,CAAgBjB,IAAII,GAAJ,EAASN,GAAT,CAAhB,CAFnB;AAGLa,YAAU,CAAC,GAAGC,IAAJ,KAAaI,mBAAQC,OAAR,CAAgBN,OAAOC,IAAP,CAAhB,CAHlB;AAILG,WAAU,MAAMC,mBAAQC,OAAR,CAAgBH,KAAhB,CAJX;AAKLI,mBALK;AAMLV;AANK,GAAP;AAQD,CAfM;;AAiBA,IAAMW,oCAAcZ,cAApB,C,CAAmC","file":"store.js","sourcesContent":["import Promise from 'bluebird'\n\nimport clone from 'ramda/src/clone'\n\nexport const ValueStore = () => {\n  let val = null\n\n  return {\n    get: () => clone(val),\n    set: newVal => val = newVal\n  }\n}\n\nexport const ValueStoreMap = () => {\n  const val = new Map\n\n  return {\n    get: key => clone(val.get(key)),\n    set: (key, newVal) => val.set(key, newVal)\n  }\n}\n\nexport const TimeOffset = ValueStore()\nexport const dcList = ValueStoreMap()\n\nexport const AsyncStorage = () => {\n  const store = new Map\n\n  const get = key => store.get(key)\n  const set = (key, val) => store.set(key, val)\n  const remove = keys => keys.map(e => store.delete(e))\n  const clr = () => store.clear()\n  return {\n    get     : (key) => Promise.resolve(get(key)),\n    set     : (key, val) => Promise.resolve(set(key, val)),\n    remove  : (...keys) => Promise.resolve(remove(keys)),\n    clear   : () => Promise.resolve(clr()),\n    noPrefix: () => ({}),\n    store\n  }\n}\n\nexport const PureStorage = AsyncStorage() /*{\n  get     : (...keys) => new Promise(rs => ConfigStorage.get(keys, rs)),\n  set     : obj => new Promise(rs => ConfigStorage.set(obj, rs)),\n  remove  : (...keys) => new Promise(rs => ConfigStorage.remove(...keys, rs)),\n  noPrefix: () => ConfigStorage.noPrefix(),\n  clear   : () => new Promise(rs => ConfigStorage.clear(rs))\n}*/\n"]}