{"version":3,"sources":["../../src/util/log.js"],"names":["tagNormalize","e","arrify","unnest","fullNormalize","trim","isEmpty","stringNormalize","String","length","genericLogger","LogEvent","constructor","log","values","print","Sheduler","queue","buffer","add","time","tagStr","results","map","first","other","firstLine","join","push","sheduleBuffer","logEvent","setInterval","sheduler","Logger","moduleName","rest","fullModule","unshift","fullname","debug","logger","tags","objects","setLogger","customLogger","Debug"],"mappings":"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","file":"log.js","sourcesContent":["//@flow\n\n// import memoize from 'memoizee'\n\nimport Debug from 'debug'\n\nimport trim from 'ramda/src/trim'\nimport map from 'ramda/src/map'\nimport chain from 'ramda/src/chain'\nimport pipe from 'ramda/src/pipe'\nimport split from 'ramda/src/split'\nimport both from 'ramda/src/both'\nimport is from 'ramda/src/is'\nimport when from 'ramda/src/when'\nimport take from 'ramda/src/take'\nimport reject from 'ramda/src/reject'\nimport isEmpty from 'ramda/src/isEmpty'\nimport join from 'ramda/src/join'\nimport unapply from 'ramda/src/unapply'\nimport unnest from 'ramda/src/unnest'\nimport tail from 'ramda/src/tail'\n\nimport dTime from './dtime'\nimport { immediate } from './smart-timeout'\n\ntype VariString = string | string[]\n\ntype Normalize = (tag: string) => string\ntype FullNormalize = (tags: VariString) => string\n\nconst tagNormalize: Normalize = e => `[${e}]`\n\nconst arrify = unapply(unnest)\n\nconst fullNormalize: FullNormalize = pipe(\n  arrify,\n  chain(split(',')),\n  map(trim),\n  reject(isEmpty),\n  map(tagNormalize),\n  join('')\n)\n\nconst stringNormalize = when(\n  both(is(String), e => e.length > 50),\n  take(150)\n)\n// const isSimple = either(\n//   is(String),\n//   is(Number)\n// )\n\n// const prettify = unless(\n//   isSimple,\n//   pretty\n// )\n\nconst genericLogger = Debug('telegram-mtproto')\n\nclass LogEvent {\n  log: typeof genericLogger\n  values: mixed[]\n  constructor(log: typeof genericLogger, values: mixed[]) {\n    this.log = log\n    this.values = values\n  }\n  print() {\n    this.log(...this.values)\n  }\n}\n\nclass Sheduler {\n  queue: LogEvent[][] = []\n  buffer: LogEvent[] = []\n  add = (log: typeof genericLogger, time: string, tagStr: string, values: mixed[]) => {\n    const results = values.map(stringNormalize)\n    const first = results[0] || ''\n    const other = tail(results)\n    const firstLine = [tagStr, time, first].join('  ')\n    this.buffer.push(new LogEvent(log, [firstLine, ...other]))\n  }\n  sheduleBuffer = () => {\n    this.queue.push(this.buffer)\n    this.buffer = []\n  }\n  print = () => {\n    for (const buffer of this.queue)\n      for (const logEvent of buffer)\n        logEvent.print()\n    this.queue = []\n  }\n  constructor() {\n    setInterval(this.sheduleBuffer, 50)\n    setInterval(this.print, 300)\n  }\n}\n\nconst sheduler = new Sheduler\n\nconst Logger = (moduleName: VariString, ...rest: string[]) => {\n  const fullModule: string[] = arrify(moduleName, ...rest)\n  fullModule.unshift('telegram-mtproto')\n  const fullname = fullModule.join(':')\n  const debug = Debug(fullname)\n  const logger = (tags: string | string[]) => {\n    const tagStr = fullNormalize(tags)\n    return (...objects: any[]) => {\n      const time = dTime()\n      immediate(sheduler.add, debug, time, tagStr, objects)\n    }\n  }\n  return logger\n}\n\nexport const setLogger = (customLogger: Function) => {\n  Debug.log = customLogger\n}\n\nexport default Logger"]}