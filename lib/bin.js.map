{"version":3,"sources":["../src/bin.js"],"names":["stringToChars","bytesToHex","bytesFromHex","bytesCmp","bytesXor","bytesToWords","bytesFromWords","bytesFromLeemonBigInt","bytesFromNativeBigInt","bytesToArrayBuffer","convertToArrayBuffer","convertToUint8Array","convertToByteArray","bytesFromArrayBuffer","bufferConcat","longToInts","longToBytes","lshift32","intToUint","uintToInt","sha1HashSync","sha1BytesSync","sha256HashSync","rsaEncrypt","addPadding","aesEncryptSync","aesDecryptSync","gzipUncompress","nextRandomInt","pqPrimeFactorization","pqPrimeLeemon","bytesModPow","gcdNative","pqPrimeNative","CryptoJSlib","CryptoJS","rushaInstance","Rusha","str","ln","length","result","Array","i","charCodeAt","strDecToHex","bytes","arr","push","toString","join","hexString","len","start","parseInt","charAt","substr","bytes1","bytes2","ArrayBuffer","Uint8Array","words","lib","WordArray","init","wordArray","sigBytes","bigInt","b","buffer","undefined","byteLength","BYTES_PER_ELEMENT","isArray","newBytes","byteView","from","buffer1","buffer2","l1","l2","tmp","set","dividerLem","sLong","lemNum","div","rem","resL","reverse","high","low","highNum","nLow","res","rshift32","num","val","middle","hashBytes","rawDigest","hashWords","SHA256","publicKey","N","modulus","E","exponent","X","encryptedBigInt","encryptedBytes","blockSize","zeroes","needPadding","padding","concat","keyBytes","ivBytes","encryptedWords","AES","encrypt","iv","pad","NoPadding","mode","IGE","ciphertext","decryptedWords","decrypt","maxValue","Math","floor","random","pqBytes","hex","date","Date","window","BigInt","what","console","log","getTime","minSize","ceil","bpe","lWhat","minBits","minLen","it","q","lim","a","c","g","z","x","y","j","one","P","Q","m","xBigInt","yBigInt","mBigInt","resBigInt","n","r","f"],"mappings":"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","file":"bin.js","sourcesContent":["import toLower from 'ramda/src/toLower'\nimport Rusha from 'rusha'\nimport * as CryptoJSlib from '@goodmind/node-cryptojs-aes'\nconst { CryptoJS } = CryptoJSlib\nimport { inflate } from 'pako/lib/inflate'\n\nimport random from './service/secure-random'\n\n\nimport { eGCD_, greater, divide_, str2bigInt, equalsInt,\n  isZero, bigInt2str, copy_, copyInt_, rightShift_,\n  leftShift_, sub_, add_, powMod, bpe, one } from 'leemon'\n\n\nconst rushaInstance = new Rusha(1024 * 1024)\n\n\n\nexport function stringToChars(str: string) {\n  const ln = str.length\n  const result: number[] = Array(ln)\n  for (let i = 0; i < ln; ++i)\n    result[i] = str.charCodeAt(i)\n  return result\n}\n\nexport const strDecToHex = str => toLower(\n  bigInt2str(\n    str2bigInt(str, 10, 0), 16\n  ))\n\nexport function bytesToHex(bytes = []) {\n  const arr = []\n  for (let i = 0; i < bytes.length; i++) {\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16))\n  }\n  return arr.join('')\n}\n\nexport function bytesFromHex(hexString: string) {\n  const len = hexString.length\n  let start = 0\n  const bytes = []\n\n  if (hexString.length % 2) {\n    bytes.push(parseInt(hexString.charAt(0), 16))\n    start++\n  }\n\n  for (let i = start; i < len; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\n  }\n\n  return bytes\n}\n\nexport function bytesCmp(bytes1, bytes2) {\n  const len = bytes1.length\n  if (len !== bytes2.length) {\n    return false\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (bytes1[i] !== bytes2[i])\n      return false\n  }\n  return true\n}\n\nexport function bytesXor(bytes1, bytes2) {\n  const len = bytes1.length\n  const bytes = []\n\n  for (let i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i]\n  }\n\n  return bytes\n}\n\nexport function bytesToWords(bytes) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  const len = bytes.length\n  const words = []\n  let i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << 24 - i % 4 * 8\n  }\n\n  return new CryptoJS.lib.WordArray.init(words, len)\n}\n\nexport function bytesFromWords(wordArray) {\n  const words = wordArray.words\n  const sigBytes = wordArray.sigBytes\n  const bytes = []\n\n  for (let i = 0; i < sigBytes; i++) {\n    bytes.push(words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)\n  }\n\n  return bytes\n}\n\n\nexport function bytesFromLeemonBigInt(bigInt) {\n  const str = bigInt2str(bigInt, 16)\n  return bytesFromHex(str)\n}\n\nexport function bytesFromNativeBigInt(bigInt) {\n  const str = bigInt.toString(16)\n  return bytesFromHex(str)\n}\n\nexport function bytesToArrayBuffer(b) {\n  return (new Uint8Array(b)).buffer\n}\n\nexport function convertToArrayBuffer(bytes) {\n  // Be careful with converting subarrays!!\n  if (bytes instanceof ArrayBuffer) {\n    return bytes\n  }\n  if (bytes.buffer !== undefined &&\n    bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT) {\n    return bytes.buffer\n  }\n  return bytesToArrayBuffer(bytes)\n}\n\nexport function convertToUint8Array(bytes) {\n  if (bytes.buffer !== undefined)\n    return bytes\n  return new Uint8Array(bytes)\n}\n\nexport function convertToByteArray(bytes) {\n  if (Array.isArray(bytes))\n    return bytes\n  bytes = convertToUint8Array(bytes)\n  const newBytes = []\n  for (let i = 0, len = bytes.length; i < len; i++)\n    newBytes.push(bytes[i])\n  return newBytes\n}\n\nexport function bytesFromArrayBuffer(buffer) {\n  const byteView = new Uint8Array(buffer)\n  const bytes = Array.from( byteView )\n  return bytes\n}\n\nexport function bufferConcat(buffer1, buffer2) {\n  const l1 = buffer1.byteLength || buffer1.length\n  const l2 = buffer2.byteLength || buffer2.length\n  const tmp = new Uint8Array(l1 + l2)\n  tmp.set(\n    buffer1 instanceof ArrayBuffer\n      ? new Uint8Array(buffer1)\n      : buffer1,\n    0)\n  tmp.set(\n    buffer2 instanceof ArrayBuffer\n      ? new Uint8Array(buffer2)\n      : buffer2,\n    l1)\n\n  return tmp.buffer\n}\n\n// const dividerBig = bigint(0x100000000)\nconst dividerLem = str2bigInt('100000000', 16, 4)\n\n// const printTimers = (timeL, timeB, a, b, n) => setTimeout(\n//   () => console.log(`Timer L ${timeL} B ${timeB}`, ...a, ...b, n || ''),\n//   100)\n\nexport function longToInts(sLong: string) {\n  const lemNum = str2bigInt(sLong, 10, 6)\n  const div = new Array(lemNum.length)\n  const rem = new Array(lemNum.length)\n  divide_(lemNum, dividerLem, div, rem)\n  const resL = [\n    ~~bigInt2str(div, 10),\n    ~~bigInt2str(rem, 10)\n  ]\n  return resL\n}\n\nexport function longToBytes(sLong) {\n  return bytesFromWords({ words: longToInts(sLong), sigBytes: 8 }).reverse()\n}\n\nexport function lshift32(high, low) {\n  const highNum = str2bigInt(high.toString(), 10, 6)\n  const nLow = str2bigInt(low.toString(), 10, 6)\n  leftShift_(highNum, 32)\n\n  add_(highNum, nLow)\n  const res = bigInt2str(highNum, 10)\n  return res\n}\n\nexport const rshift32 = str => {\n  const num = str2bigInt(str, 10, 6)\n  rightShift_(num, 32)\n  return bigInt2str(num, 10)\n}\n\nexport function intToUint(val: string) {\n  let result = ~~val\n  if (result < 0)\n    result = result + 0x100000000\n  return result\n}\n\nconst middle = 0x100000000 / 2 - 1\n\nexport function uintToInt(val: number): number {\n  if (val > middle)\n    val = val - 0x100000000\n  return val\n}\n\nexport function sha1HashSync(bytes) {\n  // console.log(dT(), 'SHA-1 hash start', bytes.byteLength || bytes.length)\n  const hashBytes = rushaInstance.rawDigest(bytes).buffer\n  // console.log(dT(), 'SHA-1 hash finish')\n\n  return hashBytes\n}\n\nexport function sha1BytesSync(bytes) {\n  return bytesFromArrayBuffer(sha1HashSync(bytes))\n}\n\nexport function sha256HashSync(bytes) {\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\n  const hashWords = CryptoJS.SHA256(bytesToWords(bytes))\n  // console.log(dT(), 'SHA-2 hash finish')\n\n  const hashBytes = bytesFromWords(hashWords)\n\n  return hashBytes\n}\n\nexport function rsaEncrypt(publicKey, bytes) {\n  bytes = addPadding(bytes, 255)\n\n  const N = str2bigInt(publicKey.modulus, 16, 256)\n  const E = str2bigInt(publicKey.exponent, 16, 256)\n  const X = str2bigInt(bytesToHex(bytes), 16, 256)\n  const encryptedBigInt = powMod(X, E, N),\n        encryptedBytes = bytesFromHex(bigInt2str(encryptedBigInt, 16))\n\n  return encryptedBytes\n}\n\nexport function addPadding(bytes, blockSize, zeroes) {\n  blockSize = blockSize || 16\n  const len = bytes.byteLength || bytes.length\n  const needPadding = blockSize - len % blockSize\n  if (needPadding > 0 && needPadding < blockSize) {\n    const padding = new Array(needPadding)\n    if (zeroes) {\n      for (let i = 0; i < needPadding; i++)\n        padding[i] = 0\n    } else\n      random(padding)\n\n    bytes = bytes instanceof ArrayBuffer\n      ? bufferConcat(bytes, padding)\n      : bytes.concat(padding)\n  }\n\n  return bytes\n}\n\nexport function aesEncryptSync(bytes, keyBytes, ivBytes) {\n  // console.log(dT(), 'AES encrypt start', len/*, bytesToHex(keyBytes), bytesToHex(ivBytes)*/)\n  bytes = addPadding(bytes)\n\n  const encryptedWords = CryptoJS.AES.encrypt(bytesToWords(bytes), bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  }).ciphertext\n\n  const encryptedBytes = bytesFromWords(encryptedWords)\n  // console.log(dT(), 'AES encrypt finish')\n\n  return encryptedBytes\n}\n\nexport function aesDecryptSync(encryptedBytes, keyBytes, ivBytes) {\n\n  // console.log(dT(), 'AES decrypt start', encryptedBytes.length)\n  const decryptedWords = CryptoJS.AES.decrypt({ ciphertext: bytesToWords(encryptedBytes) }, bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  })\n\n  const bytes = bytesFromWords(decryptedWords)\n  // console.log(dT(), 'AES decrypt finish')\n\n  return bytes\n}\n\nexport function gzipUncompress(bytes) {\n  // console.log('Gzip uncompress start')\n  const result = inflate(bytes)\n  // console.log('Gzip uncompress finish')\n  return result\n}\n\nexport function nextRandomInt(maxValue) {\n  return Math.floor(Math.random() * maxValue)\n}\n\n\nexport function pqPrimeFactorization(pqBytes) {\n  let result = false\n  const hex = bytesToHex(pqBytes)\n  const date = new Date()\n  if (window.BigInt) {\n    const what = BigInt(`0x${hex}`)\n    result = pqPrimeNative(what)\n    console.log('[MTProto] Time to factorize pq with Native BigInt:', new Date().getTime() - date.getTime())\n  } else {\n    const minSize = Math.ceil(64 / bpe) + 1\n    const lWhat = str2bigInt(hex, 16, minSize)\n    result = pqPrimeLeemon(lWhat)\n    console.log('[MTProto] Time to factorize pq with Leemon BigInt:', new Date().getTime() - date.getTime())\n  }\n  return result\n}\n\n\nexport function pqPrimeLeemon(what) {\n  const minBits = 64\n  const minLen = Math.ceil(minBits / bpe) + 1\n  let it = 0\n  let q, lim\n  const a = new Array(minLen)\n  const b = new Array(minLen)\n  const c = new Array(minLen)\n  const g = new Array(minLen)\n  const z = new Array(minLen)\n  const x = new Array(minLen)\n  const y = new Array(minLen)\n\n  for (let i = 0; i < 3; i++) {\n    q = (nextRandomInt(128) & 15) + 17\n    copyInt_(x, nextRandomInt(1000000000) + 1)\n    copy_(y, x)\n    lim = 1 << i + 18\n\n    for (let j = 1; j < lim; j++) {\n      ++it\n      copy_(a, x)\n      copy_(b, x)\n      copyInt_(c, q)\n\n      while (!isZero(b)) {\n        if (b[0] & 1) {\n          add_(c, a)\n          if (greater(c, what)) {\n            sub_(c, what)\n          }\n        }\n        add_(a, a)\n        if (greater(a, what)) {\n          sub_(a, what)\n        }\n        rightShift_(b, 1)\n      }\n\n      copy_(x, c)\n      if (greater(x, y)) {\n        copy_(z, x)\n        sub_(z, y)\n      } else {\n        copy_(z, y)\n        sub_(z, x)\n      }\n      eGCD_(z, what, g, a, b)\n      if (!equalsInt(g, 1)) {\n        break\n      }\n      if ((j & j - 1) === 0) {\n        copy_(y, x)\n      }\n    }\n    if (greater(g, one)) {\n      break\n    }\n  }\n\n  divide_(what, g, x, y)\n\n  const [P, Q] =\n    greater(g, x)\n      ? [x, g]\n      : [g, x]\n\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\n\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it]\n}\n\nexport function bytesModPow(x, y, m) {\n  const xBigInt = str2bigInt(bytesToHex(x), 16)\n  const yBigInt = str2bigInt(bytesToHex(y), 16)\n  const mBigInt = str2bigInt(bytesToHex(m), 16)\n  const resBigInt = powMod(xBigInt, yBigInt, mBigInt)\n\n  return bytesFromHex(bigInt2str(resBigInt, 16))\n}\n\n// Native BigInt\nexport function gcdNative(n, m) {\n  let r = BigInt(0)\n  while (n !== BigInt(0)) {\n    r = m % n\n    m = n\n    n = r\n  }\n  return m\n}\n\nexport function pqPrimeNative(what) {\n  let it = 0,\n      g\n  for (let i = 0; i < 3; i++) {\n    let q = BigInt((nextRandomInt(128) & 15) + 17),\n        x = BigInt(nextRandomInt(1000000000) + 1),\n        y = x,\n        lim = 1 << i + 18\n\n    for (let j = 1; j < lim; j++) {\n      ++it\n      let a = x,\n          b = x,\n          c = q\n\n      while (b !== BigInt(0)) {\n        if ((b & BigInt(1)) !== BigInt(0)) {\n          c += a\n          if (c > what) {\n            c -= what\n          }\n        }\n        a += a\n        if (a > what) {\n          a -= what\n        }\n        b >>= BigInt(1)\n      }\n\n      x = c\n      const z = x < y ? y - x : x - y\n      g = gcdNative(z, what)\n      if (g !== BigInt(1)) {\n        break\n      }\n      if ((j & j - 1) == 0) {\n        y = x\n      }\n    }\n    if (g > BigInt(1)) {\n      break\n    }\n  }\n\n  let f = what / g,\n      P,\n      Q\n\n  if (g > f) {\n    P = f\n    Q = g\n  } else {\n    P = g\n    Q = f\n  }\n\n    // console.log('native', 'P', P, 'Q', Q)\n\n  return [bytesFromNativeBigInt(P), bytesFromNativeBigInt(Q)]\n}\n"]}