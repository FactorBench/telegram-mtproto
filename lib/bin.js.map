{"version":3,"sources":["../src/bin.js"],"names":["stringToChars","bytesToHex","bytesFromHex","bytesCmp","bytesXor","bytesToWords","bytesFromWords","bytesFromLeemonBigInt","bytesToArrayBuffer","convertToArrayBuffer","convertToUint8Array","convertToByteArray","bytesFromArrayBuffer","bufferConcat","longToInts","longToBytes","lshift32","intToUint","uintToInt","sha1HashSync","sha1BytesSync","sha256HashSync","rsaEncrypt","addPadding","aesEncryptSync","aesDecryptSync","gzipUncompress","nextRandomInt","pqPrimeFactorization","pqPrimeLeemon","bytesModPow","CryptoJSlib","CryptoJS","rushaInstance","Rusha","str","ln","length","result","Array","i","charCodeAt","strDecToHex","bytes","arr","push","toString","join","hexString","len","start","parseInt","charAt","substr","bytes1","bytes2","ArrayBuffer","Uint8Array","words","lib","WordArray","init","wordArray","sigBytes","bigInt","b","buffer","undefined","byteLength","BYTES_PER_ELEMENT","isArray","newBytes","byteView","from","buffer1","buffer2","l1","l2","tmp","set","dividerLem","sLong","lemNum","div","rem","resL","reverse","high","low","highNum","nLow","res","rshift32","num","val","middle","hashBytes","rawDigest","hashWords","SHA256","publicKey","N","modulus","E","exponent","X","encryptedBigInt","encryptedBytes","blockSize","zeroes","needPadding","padding","concat","keyBytes","ivBytes","encryptedWords","AES","encrypt","iv","pad","NoPadding","mode","IGE","ciphertext","decryptedWords","decrypt","maxValue","Math","floor","random","pqBytes","minSize","ceil","bpe","hex","lWhat","what","minBits","minLen","it","q","lim","a","c","g","z","x","y","j","one","P","Q","m","xBigInt","yBigInt","mBigInt","resBigInt"],"mappings":"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","file":"bin.js","sourcesContent":["import toLower from 'ramda/src/toLower'\nimport Rusha from 'rusha'\nimport * as CryptoJSlib from '@goodmind/node-cryptojs-aes'\nconst { CryptoJS } = CryptoJSlib\nimport { inflate } from 'pako/lib/inflate'\n\nimport random from './service/secure-random'\n\n\nimport { eGCD_, greater, divide_, str2bigInt, equalsInt,\n  isZero, bigInt2str, copy_, copyInt_, rightShift_,\n  leftShift_, sub_, add_, powMod, bpe, one } from './vendor/leemon'\n\n\nconst rushaInstance = new Rusha(1024 * 1024)\n\n\n\nexport function stringToChars(str: string) {\n  const ln = str.length\n  const result: number[] = Array(ln)\n  for (let i = 0; i < ln; ++i)\n    result[i] = str.charCodeAt(i)\n  return result\n}\n\nexport const strDecToHex = str => toLower(\n  bigInt2str(\n    str2bigInt(str, 10, 0), 16\n  ))\n\nexport function bytesToHex(bytes = []) {\n  const arr = []\n  for (let i = 0; i < bytes.length; i++) {\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16))\n  }\n  return arr.join('')\n}\n\nexport function bytesFromHex(hexString: string) {\n  const len = hexString.length\n  let start = 0\n  const bytes = []\n\n  if (hexString.length % 2) {\n    bytes.push(parseInt(hexString.charAt(0), 16))\n    start++\n  }\n\n  for (let i = start; i < len; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\n  }\n\n  return bytes\n}\n\nexport function bytesCmp(bytes1, bytes2) {\n  const len = bytes1.length\n  if (len !== bytes2.length) {\n    return false\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (bytes1[i] !== bytes2[i])\n      return false\n  }\n  return true\n}\n\nexport function bytesXor(bytes1, bytes2) {\n  const len = bytes1.length\n  const bytes = []\n\n  for (let i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i]\n  }\n\n  return bytes\n}\n\nexport function bytesToWords(bytes) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  const len = bytes.length\n  const words = []\n  let i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << 24 - i % 4 * 8\n  }\n\n  return new CryptoJS.lib.WordArray.init(words, len)\n}\n\nexport function bytesFromWords(wordArray) {\n  const words = wordArray.words\n  const sigBytes = wordArray.sigBytes\n  const bytes = []\n\n  for (let i = 0; i < sigBytes; i++) {\n    bytes.push(words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)\n  }\n\n  return bytes\n}\n\n\nexport function bytesFromLeemonBigInt(bigInt) {\n  const str = bigInt2str(bigInt, 16)\n  return bytesFromHex(str)\n}\n\nexport function bytesToArrayBuffer(b) {\n  return (new Uint8Array(b)).buffer\n}\n\nexport function convertToArrayBuffer(bytes) {\n  // Be careful with converting subarrays!!\n  if (bytes instanceof ArrayBuffer) {\n    return bytes\n  }\n  if (bytes.buffer !== undefined &&\n    bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT) {\n    return bytes.buffer\n  }\n  return bytesToArrayBuffer(bytes)\n}\n\nexport function convertToUint8Array(bytes) {\n  if (bytes.buffer !== undefined)\n    return bytes\n  return new Uint8Array(bytes)\n}\n\nexport function convertToByteArray(bytes) {\n  if (Array.isArray(bytes))\n    return bytes\n  bytes = convertToUint8Array(bytes)\n  const newBytes = []\n  for (let i = 0, len = bytes.length; i < len; i++)\n    newBytes.push(bytes[i])\n  return newBytes\n}\n\nexport function bytesFromArrayBuffer(buffer) {\n  const byteView = new Uint8Array(buffer)\n  const bytes = Array.from( byteView )\n  return bytes\n}\n\nexport function bufferConcat(buffer1, buffer2) {\n  const l1 = buffer1.byteLength || buffer1.length\n  const l2 = buffer2.byteLength || buffer2.length\n  const tmp = new Uint8Array(l1 + l2)\n  tmp.set(\n    buffer1 instanceof ArrayBuffer\n      ? new Uint8Array(buffer1)\n      : buffer1,\n    0)\n  tmp.set(\n    buffer2 instanceof ArrayBuffer\n      ? new Uint8Array(buffer2)\n      : buffer2,\n    l1)\n\n  return tmp.buffer\n}\n\n// const dividerBig = bigint(0x100000000)\nconst dividerLem = str2bigInt('100000000', 16, 4)\n\n// const printTimers = (timeL, timeB, a, b, n) => setTimeout(\n//   () => console.log(`Timer L ${timeL} B ${timeB}`, ...a, ...b, n || ''),\n//   100)\n\nexport function longToInts(sLong: string) {\n  const lemNum = str2bigInt(sLong, 10, 6)\n  const div = new Array(lemNum.length)\n  const rem = new Array(lemNum.length)\n  divide_(lemNum, dividerLem, div, rem)\n  const resL = [\n    ~~bigInt2str(div, 10),\n    ~~bigInt2str(rem, 10)\n  ]\n  return resL\n}\n\nexport function longToBytes(sLong) {\n  return bytesFromWords({ words: longToInts(sLong), sigBytes: 8 }).reverse()\n}\n\nexport function lshift32(high, low) {\n  const highNum = str2bigInt(high.toString(), 10, 6)\n  const nLow = str2bigInt(low.toString(), 10, 6)\n  leftShift_(highNum, 32)\n\n  add_(highNum, nLow)\n  const res = bigInt2str(highNum, 10)\n  return res\n}\n\nexport const rshift32 = str => {\n  const num = str2bigInt(str, 10, 6)\n  rightShift_(num, 32)\n  return bigInt2str(num, 10)\n}\n\nexport function intToUint(val: string) {\n  let result = ~~val\n  if (result < 0)\n    result = result + 0x100000000\n  return result\n}\n\nconst middle = 0x100000000 / 2 - 1\n\nexport function uintToInt(val: number): number {\n  if (val > middle)\n    val = val - 0x100000000\n  return val\n}\n\nexport function sha1HashSync(bytes) {\n  // console.log(dT(), 'SHA-1 hash start', bytes.byteLength || bytes.length)\n  const hashBytes = rushaInstance.rawDigest(bytes).buffer\n  // console.log(dT(), 'SHA-1 hash finish')\n\n  return hashBytes\n}\n\nexport function sha1BytesSync(bytes) {\n  return bytesFromArrayBuffer(sha1HashSync(bytes))\n}\n\nexport function sha256HashSync(bytes) {\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\n  const hashWords = CryptoJS.SHA256(bytesToWords(bytes))\n  // console.log(dT(), 'SHA-2 hash finish')\n\n  const hashBytes = bytesFromWords(hashWords)\n\n  return hashBytes\n}\n\nexport function rsaEncrypt(publicKey, bytes) {\n  bytes = addPadding(bytes, 255)\n\n  const N = str2bigInt(publicKey.modulus, 16, 256)\n  const E = str2bigInt(publicKey.exponent, 16, 256)\n  const X = str2bigInt(bytesToHex(bytes), 16, 256)\n  const encryptedBigInt = powMod(X, E, N),\n        encryptedBytes = bytesFromHex(bigInt2str(encryptedBigInt, 16))\n\n  return encryptedBytes\n}\n\nexport function addPadding(bytes, blockSize, zeroes) {\n  blockSize = blockSize || 16\n  const len = bytes.byteLength || bytes.length\n  const needPadding = blockSize - len % blockSize\n  if (needPadding > 0 && needPadding < blockSize) {\n    const padding = new Array(needPadding)\n    if (zeroes) {\n      for (let i = 0; i < needPadding; i++)\n        padding[i] = 0\n    } else\n      random(padding)\n\n    bytes = bytes instanceof ArrayBuffer\n      ? bufferConcat(bytes, padding)\n      : bytes.concat(padding)\n  }\n\n  return bytes\n}\n\nexport function aesEncryptSync(bytes, keyBytes, ivBytes) {\n  // console.log(dT(), 'AES encrypt start', len/*, bytesToHex(keyBytes), bytesToHex(ivBytes)*/)\n  bytes = addPadding(bytes)\n\n  const encryptedWords = CryptoJS.AES.encrypt(bytesToWords(bytes), bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  }).ciphertext\n\n  const encryptedBytes = bytesFromWords(encryptedWords)\n  // console.log(dT(), 'AES encrypt finish')\n\n  return encryptedBytes\n}\n\nexport function aesDecryptSync(encryptedBytes, keyBytes, ivBytes) {\n\n  // console.log(dT(), 'AES decrypt start', encryptedBytes.length)\n  const decryptedWords = CryptoJS.AES.decrypt({ ciphertext: bytesToWords(encryptedBytes) }, bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  })\n\n  const bytes = bytesFromWords(decryptedWords)\n  // console.log(dT(), 'AES decrypt finish')\n\n  return bytes\n}\n\nexport function gzipUncompress(bytes) {\n  // console.log('Gzip uncompress start')\n  const result = inflate(bytes)\n  // console.log('Gzip uncompress finish')\n  return result\n}\n\nexport function nextRandomInt(maxValue) {\n  return Math.floor(Math.random() * maxValue)\n}\n\n\nexport function pqPrimeFactorization(pqBytes) {\n  const minSize = Math.ceil(64 / bpe) + 1\n\n  // const what = new BigInteger(pqBytes)\n  const hex = bytesToHex(pqBytes)\n  const lWhat = str2bigInt(hex, 16, minSize)\n  const result = pqPrimeLeemon(lWhat)\n  return result\n}\n\n\nexport function pqPrimeLeemon(what) {\n  const minBits = 64\n  const minLen = Math.ceil(minBits / bpe) + 1\n  let it = 0\n  let q, lim\n  const a = new Array(minLen)\n  const b = new Array(minLen)\n  const c = new Array(minLen)\n  const g = new Array(minLen)\n  const z = new Array(minLen)\n  const x = new Array(minLen)\n  const y = new Array(minLen)\n\n  for (let i = 0; i < 3; i++) {\n    q = (nextRandomInt(128) & 15) + 17\n    copyInt_(x, nextRandomInt(1000000000) + 1)\n    copy_(y, x)\n    lim = 1 << i + 18\n\n    for (let j = 1; j < lim; j++) {\n      ++it\n      copy_(a, x)\n      copy_(b, x)\n      copyInt_(c, q)\n\n      while (!isZero(b)) {\n        if (b[0] & 1) {\n          add_(c, a)\n          if (greater(c, what)) {\n            sub_(c, what)\n          }\n        }\n        add_(a, a)\n        if (greater(a, what)) {\n          sub_(a, what)\n        }\n        rightShift_(b, 1)\n      }\n\n      copy_(x, c)\n      if (greater(x, y)) {\n        copy_(z, x)\n        sub_(z, y)\n      } else {\n        copy_(z, y)\n        sub_(z, x)\n      }\n      eGCD_(z, what, g, a, b)\n      if (!equalsInt(g, 1)) {\n        break\n      }\n      if ((j & j - 1) === 0) {\n        copy_(y, x)\n      }\n    }\n    if (greater(g, one)) {\n      break\n    }\n  }\n\n  divide_(what, g, x, y)\n\n  const [P, Q] =\n    greater(g, x)\n      ? [x, g]\n      : [g, x]\n\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\n\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it]\n}\n\nexport function bytesModPow(x, y, m) {\n  const xBigInt = str2bigInt(bytesToHex(x), 16)\n  const yBigInt = str2bigInt(bytesToHex(y), 16)\n  const mBigInt = str2bigInt(bytesToHex(m), 16)\n  const resBigInt = powMod(xBigInt, yBigInt, mBigInt)\n\n  return bytesFromHex(bigInt2str(resBigInt, 16))\n}\n\n"]}