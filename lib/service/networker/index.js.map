{"version":3,"sources":["../../../src/service/networker/index.js"],"names":["log","Logger","updatesProcessor","iii","akStopped","xhrSendBuffer","isNode","window","storeIntString","writer","value","field","WriteMediator","bytes","int","Error","NetworkerThread","constructor","appConfig","chooseServer","Serialization","Deserialization","storage","emit","dc","authKey","serverSalt","options","dcID","authKeyUint8","authKeyBuffer","authKeyID","slice","wrapApiCall","bind","upload","fileUpload","fileDownload","updateSession","setInterval","checkLongPoll","seqNo","prevSessionID","sessionID","Array","updateSentMessage","sentMessageID","state","hasSent","sentMessage","getSent","NetContainer","newInner","inner","innerID","innerSentMessage","push","msg_id","deleteSent","newId","seq_no","generateSeqNo","notContentRelated","container","addSent","wrapMtpCall","method","params","serializer","mtproto","storeMethod","message","NetMessage","getBytes","pushMessage","deferred","promise","wrapMtpMessage","object","storeObject","verifyInnerMessages","msg_ids","console","serialBox","connectionInited","mapper","afterMessageID","long","resultType","isAPI","copyOptions","setPending","noShedule","sheduleRequest","Object","messageID","pushResend","delay","msg","getMsgKeyIv","msgKey","isOut","x","sha1aText","Uint8Array","sha1bText","sha1cText","sha1dText","promises","set","subarray","CryptoWorker","sha1Hash","result","Promise","all","aesKey","aesIv","sha1a","sha1b","sha1c","sha1d","toggleOffline","enabled","offline","undefined","smartTimeout","cancel","nextReqPromise","nextReq","checkConnectionPeriod","checkConnectionPromise","checkConnection","parseInt","Math","min","onOnlineCb","longPollPending","then","performResend","hasResends","resendMsgIDs","getResends","resendOpts","_","lastResendReq","req_msg_id","resend_msg_ids","parseResponse","responseBuffer","deserializerRaw","fetchIntBytes","encryptedData","fetchRawBytes","byteLength","getOffset","keyIv","dataWithPadding","aesDecrypt","deserializer","ReadMediator","typeBuffer","isInvalidSession","warn","fetchInt","offset","totalLength","messageBodyLength","messageBody","paddingLength","hashData","dataHash","buffer","deserializerOptions","getDeserializeOpts","getMsgById","deserializerData","response","fetchObject","applyServerSalt","newServerSalt","performSheduledRequest","ackMessage","msgID","pendingAcks","reqResendMessage","addResend","cleanupSent","notEmpty","sentIterator","complete","hasPending","processError","rawError","matches","error_message","match","error_code","code","type","description","originalError","processMessage","msgidInt","toString","substr","messages","bad_msg_id","bad_msg_seqno","new_server_salt","badMessage","lastServerMessages","indexOf","length","shift","body","processMessageAck","first_msg_id","server_salt","onBaseDc","baseDcID","updateCond","get","forEach","answer_msg_id","spliceCond","badMsgID","deleteResent","error","reject","resolve","State","checkLongPollCond","checkLongPollAfterDcCond","isClean","baseDc","sleepAfter","sendLongPoll","maxWait","max_delay","wait_after","max_wait","noResponse","longPoll","event","pingID","ping_id","pingMessage","succ","sendEncryptedRequest","timeout","err","ackMsgIDs","ack","messagesByteLen","currentTime","hasApiCall","hasHttpWait","lengthOverflow","singlesCount","pendingIterator","deletePending","messageByteLength","size","cond1","cond2","singleInRequest","noResponseMsgs","startMaxLength","contBox","innerMessages","i","intBytes","data","max","sqrt","dataBox","url","getBuffer","bytesHash","encryptedBytes","aesEncrypt","request","requestBox","requestData","getArray","responseType","httpClient","post","ErrorBadResponse","ErrorBadRequest","acked","NetworkerFabric","msgGetter","override","mt_message","seqno","e","stack","mt_rpc_result","startAll","stopAll","setUpdatesProcessor","callback","Set"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\nimport isNode from 'detect-node'\n\nimport is from 'ramda/src/is'\nimport contains from 'ramda/src/contains'\nimport mapObjIndexed from 'ramda/src/mapObjIndexed'\n\nimport CryptoWorker from '../../crypto'\nimport { dTime, tsNow, generateID, applyServerTime } from '../time-manager'\nimport random from '../secure-random'\nimport { NetMessage, NetContainer } from './net-message'\nimport State from './state'\nimport smartTimeout, { immediate } from '../../util/smart-timeout'\nimport { httpClient } from '../../http'\n\nimport { ErrorBadRequest, ErrorBadResponse } from '../../error'\n\nimport Logger from '../../util/log'\n\nconst log = Logger`networker`\n\nimport { convertToUint8Array, convertToArrayBuffer, sha1BytesSync,\n  nextRandomInt, bytesCmp, bytesToHex, bytesFromArrayBuffer,\n  bytesToArrayBuffer, longToBytes, uintToInt, rshift32 } from '../../bin'\n\nimport type { TLFabric, SerializationFabric, DeserializationFabric } from '../../tl'\nimport { WriteMediator, ReadMediator, TypeWriter } from '../../tl'\nimport type { Emit } from '../main/index.h'\n\nlet updatesProcessor\nlet iii = 0\nlet akStopped = false\n\n//eslint-disable-next-line\nconst xhrSendBuffer = !isNode && !('ArrayBufferView' in window)\n\ntype NetOptions = {\n  fileUpload?: boolean,\n  fileDownload?: boolean,\n  notContentRelated?: boolean,\n  afterMessageID?: string,\n  resultType?: any\n}\ntype Bytes = number[]\n\ntype ContextConfig = {\n  Serialization: SerializationFabric,\n  Deserialization: DeserializationFabric,\n  emit: Emit\n}\n\nconst storeIntString = (writer: TypeWriter) => (value: number | string, field: string) => {\n  switch (typeof value) {\n    case 'string': return WriteMediator.bytes(writer, value, `${field}:string`)\n    case 'number': return WriteMediator.int(writer, value, field)\n    default: throw new Error(`tl storeIntString field ${field} value type ${typeof value}`)\n  }\n}\n\nexport class NetworkerThread {\n  dcID: number\n  authKey: string\n  authKeyUint8: Uint8Array\n  authKeyBuffer: ArrayBuffer\n  serverSalt: string\n  iii: number\n  authKeyID: Bytes\n  upload: boolean\n  pendingAcks: number[] = []\n  seqNo: number\n  sessionID: Bytes\n  prevSessionID: Bytes\n  state = new State\n  connectionInited = false\n  checkConnectionPeriod = 0\n  checkConnectionPromise: Promise<*>\n  Serialization: SerializationFabric\n  Deserialization: DeserializationFabric\n  emit: Emit\n  lastServerMessages: string[] = []\n  constructor(\n    {\n      appConfig,\n      chooseServer,\n      Serialization,\n      Deserialization,\n      storage,\n      emit\n    }: ContextConfig,\n    dc: number,\n    authKey: string,\n    serverSalt: string,\n    options: NetOptions) {\n    this.appConfig = appConfig\n    this.chooseServer = chooseServer\n    this.Serialization = Serialization\n    this.Deserialization = Deserialization\n    this.storage = storage\n    this.emit = emit\n    this.dcID = dc\n    this.iii = iii++\n\n    this.authKey = authKey\n    this.authKeyUint8 = convertToUint8Array(authKey)\n    this.authKeyBuffer = convertToArrayBuffer(authKey)\n    this.authKeyID = sha1BytesSync(authKey).slice(-8)\n\n    //$FlowIssue\n    this.wrapApiCall = this.wrapApiCall.bind(this)\n\n    this.serverSalt = serverSalt\n\n    this.upload = options.fileUpload || options.fileDownload || false\n\n    this.updateSession()\n\n    setInterval(this.checkLongPoll, 10000) //NOTE make configurable interval\n    this.checkLongPoll()\n  }\n  updateSession() {\n    this.seqNo = 0\n    this.prevSessionID = this.sessionID\n    this.sessionID = new Array(8)\n    random(this.sessionID)\n  }\n\n  updateSentMessage(sentMessageID: string) {\n    if (!this.state.hasSent(sentMessageID)) return false\n    const sentMessage = this.state.getSent(sentMessageID)\n\n    if (sentMessage instanceof NetContainer) {\n      const newInner = []\n      for (const innerID of sentMessage.inner) {\n        const innerSentMessage = this.updateSentMessage(innerID)\n        if (innerSentMessage)\n          newInner.push(innerSentMessage.msg_id)\n      }\n      sentMessage.inner = newInner\n    }\n    this.state.deleteSent(sentMessage)\n    const newId = generateID()\n    sentMessage.msg_id = newId\n    sentMessage.seq_no = this.generateSeqNo(\n      sentMessage.notContentRelated ||\n      sentMessage.container\n    )\n    this.state.addSent(sentMessage)\n\n    return sentMessage\n  }\n\n  generateSeqNo(notContentRelated?: boolean) {\n    let seqNo = this.seqNo * 2\n\n    if (!notContentRelated) {\n      seqNo++\n      this.seqNo++\n    }\n\n    return seqNo\n  }\n\n  wrapMtpCall(method: string, params: Object, options: NetOptions) {\n    const serializer = this.Serialization({ mtproto: true })\n\n    serializer.storeMethod(method, params)\n\n    const seqNo = this.generateSeqNo()\n    const message = new NetMessage(\n      seqNo,\n      serializer.getBytes(true)\n    )\n    log([`MT call`])(method, params, message.msg_id, seqNo)\n\n    this.pushMessage(message, options)\n    return message.deferred.promise\n  }\n\n  wrapMtpMessage(object: Object, options: NetOptions = {}) {\n\n    const serializer = this.Serialization({ mtproto: true })\n    serializer.storeObject(object, 'Object')\n\n    const seqNo = this.generateSeqNo(options.notContentRelated)\n    const message = new NetMessage(\n      seqNo,\n      serializer.getBytes(true)\n    )\n    log(`MT message`)(message.msg_id, object, seqNo)\n    verifyInnerMessages(object.msg_ids)\n    this.pushMessage(message, options)\n    return message\n  }\n\n  wrapApiCall(method: string, params: Object, options: NetOptions) {\n    console.log('[WrapApiCall]', {method, params, options})\n    const serializer = this.Serialization(options)\n    const serialBox = serializer.writer\n    if (!this.connectionInited) {\n      // serializer.storeInt(0xda9b0d0d, 'invokeWithLayer')\n      // serializer.storeInt(Config.Schema.API.layer, 'layer')\n      // serializer.storeInt(0x69796de9, 'initConnection')\n      // serializer.storeInt(Config.App.id, 'api_id')\n      // serializer.storeString(navigator.userAgent || 'Unknown UserAgent', 'device_model')\n      // serializer.storeString(navigator.platform || 'Unknown Platform', 'system_version')\n      // serializer.storeString(Config.App.version, 'app_version')\n      // serializer.storeString(navigator.language || 'en', 'lang_code')\n      const mapper = storeIntString(serialBox)\n      mapObjIndexed(mapper, this.appConfig)\n    }\n\n    if (options.afterMessageID) {\n      WriteMediator.int(serialBox, 0xcb9f372d, 'invokeAfterMsg')\n      WriteMediator.long(serialBox, options.afterMessageID, 'msg_id')\n    }\n\n    options.resultType = serializer.storeMethod(method, params)\n\n    const seqNo = this.generateSeqNo()\n    const message = new NetMessage(\n      seqNo,\n      serializer.getBytes(true)\n    )\n    message.isAPI = true\n\n    log([`Api call`])(method, params, message.msg_id, seqNo, options)\n\n    this.pushMessage(message, options)\n    return message.deferred.promise\n  }\n\n  checkLongPollCond = () =>\n    this.longPollPending &&\n      this.longPollPending > tsNow() ||\n    !!this.offline ||\n    akStopped\n\n  checkLongPollAfterDcCond = (isClean: boolean, baseDc: number) => isClean && (\n    this.dcID !== baseDc ||\n    this.upload ||\n    this.sleepAfter &&\n      this.sleepAfter < tsNow()\n  )\n\n  checkLongPoll = async () => {\n    const isClean = this.cleanupSent()\n    // console.log('Check lp', this.longPollPending, tsNow(), this.dcID, isClean)\n    if (this.checkLongPollCond())\n      return false\n\n    const baseDc: number = await this.storage.get('dc')\n    if (this.checkLongPollAfterDcCond(isClean, baseDc))\n      // console.warn(dTime(), 'Send long-poll for DC is delayed', this.dcID, this.sleepAfter)\n      return\n    return this.sendLongPoll()\n  }\n\n  sendLongPoll: () => Promise<boolean | void> = async () => {\n    const maxWait = 25000\n    this.longPollPending = tsNow() + maxWait\n    // console.log('Set lp', this.longPollPending, tsNow())\n\n    await this.wrapMtpCall('http_wait', {\n      max_delay : 500,\n      wait_after: 150,\n      max_wait  : maxWait\n    }, {\n      noResponse: true,\n      longPoll  : true\n    })\n    delete this.longPollPending\n    return this.checkLongPoll()\n  }\n\n  pushMessage(message: NetMessage, options: NetOptions = {}) {\n    message.copyOptions(options)\n    this.state.addSent(message)\n    this.state.setPending(message.msg_id)\n\n    if (!options || !options.noShedule)\n      this.sheduleRequest()\n    if (is(Object, options))\n      options.messageID = message.msg_id\n  }\n\n  pushResend(messageID: string, delay?: number) {\n    const value = delay\n      ? tsNow() + delay\n      : 0\n    const sentMessage = this.state.getSent(messageID)\n    if (sentMessage instanceof NetContainer)\n      for (const msg of sentMessage.inner)\n        this.state.setPending(msg, value)\n    else\n      this.state.setPending(messageID, value)\n\n    this.sheduleRequest(delay)\n  }\n\n  async getMsgKeyIv(msgKey: number[], isOut: boolean) {\n    const authKey = this.authKeyUint8\n    const x = isOut\n      ? 0\n      : 8\n    const sha1aText = new Uint8Array(48)\n    const sha1bText = new Uint8Array(48)\n    const sha1cText = new Uint8Array(48)\n    const sha1dText = new Uint8Array(48)\n    const promises = []\n\n    sha1aText.set(msgKey, 0)\n    sha1aText.set(authKey.subarray(x, x + 32), 16)\n    promises.push(CryptoWorker.sha1Hash(sha1aText))\n\n    sha1bText.set(authKey.subarray(x + 32, x + 48), 0)\n    sha1bText.set(msgKey, 16)\n    sha1bText.set(authKey.subarray(x + 48, x + 64), 32)\n    promises.push(CryptoWorker.sha1Hash(sha1bText))\n\n    sha1cText.set(authKey.subarray(x + 64, x + 96), 0)\n    sha1cText.set(msgKey, 32)\n    promises.push(CryptoWorker.sha1Hash(sha1cText))\n\n    sha1dText.set(msgKey, 0)\n    sha1dText.set(authKey.subarray(x + 96, x + 128), 16)\n    promises.push(CryptoWorker.sha1Hash(sha1dText))\n\n    const result = await Promise.all(promises)\n    const aesKey = new Uint8Array(32),\n          aesIv = new Uint8Array(32),\n          sha1a = new Uint8Array(result[0]),\n          sha1b = new Uint8Array(result[1]),\n          sha1c = new Uint8Array(result[2]),\n          sha1d = new Uint8Array(result[3])\n\n    aesKey.set(sha1a.subarray(0, 8))\n    aesKey.set(sha1b.subarray(8, 20), 8)\n    aesKey.set(sha1c.subarray(4, 16), 20)\n\n    aesIv.set(sha1a.subarray(8, 20))\n    aesIv.set(sha1b.subarray(0, 8), 12)\n    aesIv.set(sha1c.subarray(16, 20), 20)\n    aesIv.set(sha1d.subarray(0, 8), 24)\n\n    return [aesKey, aesIv]\n  }\n\n  checkConnection = async event => {\n    log([`Check connection`])('%O', event)\n    smartTimeout.cancel(this.checkConnectionPromise)\n\n    const serializer = this.Serialization({ mtproto: true })\n    const pingID = [nextRandomInt(0xFFFFFFFF), nextRandomInt(0xFFFFFFFF)]\n\n    serializer.storeMethod('ping', { ping_id: pingID })\n\n    const pingMessage = new NetMessage(\n      this.generateSeqNo(true),\n      serializer.getBytes()\n    )\n\n    let succ = false\n\n    try {\n      const result = await this.sendEncryptedRequest(pingMessage, { timeout: 15000 })\n      succ = true\n      this.toggleOffline(false)\n      log(`checkConnection, result`)('%O', result)\n    } catch (err) {\n      log(`encrypted request fail`)('%O', err)\n    }\n    if (succ) return\n    const delay = this.checkConnectionPeriod * 1e3\n    log(`checkConnection, Delay`)(delay)\n    this.checkConnectionPromise = smartTimeout(\n          this.checkConnection, delay)\n    this.checkConnectionPeriod = Math.min(60, this.checkConnectionPeriod * 1.5)\n  }\n\n  toggleOffline(enabled) {\n    // console.log('toggle ', enabled, this.dcID, this.iii)\n    if (!this.offline !== undefined && this.offline == enabled)\n      return false\n\n    this.offline = enabled\n\n    if (this.offline) {\n      smartTimeout.cancel(this.nextReqPromise)\n      delete this.nextReq\n\n      if (this.checkConnectionPeriod < 1.5)\n        this.checkConnectionPeriod = 0\n\n\n      this.checkConnectionPromise = smartTimeout(\n        this.checkConnection, parseInt(this.checkConnectionPeriod * 1000))\n      this.checkConnectionPeriod = Math.min(30, (1 + this.checkConnectionPeriod) * 1.5)\n\n      this.onOnlineCb = this.checkConnection\n      this.emit('net.offline', this.onOnlineCb)\n    } else {\n      delete this.longPollPending\n      //NOTE check long state was here\n      this.checkLongPoll().then(() => {})\n      this.sheduleRequest()\n\n      if (this.onOnlineCb)\n        this.emit('net.online', this.onOnlineCb)\n\n      smartTimeout.cancel(this.checkConnectionPromise)\n\n    }\n  }\n  performResend() {\n    if (this.state.hasResends()) {\n      const resendMsgIDs = [...this.state.getResends()]\n      const resendOpts = { noShedule: true, notContentRelated: true }\n      // console.log('resendReq messages', resendMsgIDs)\n      const msg = this.wrapMtpMessage({\n        _      : 'msg_resend_req',\n        msg_ids: resendMsgIDs\n      }, resendOpts)\n      this.lastResendReq = { req_msg_id: msg.msg_id, resend_msg_ids: resendMsgIDs }\n    }\n  }\n  performSheduledRequest = async () => { //TODO extract huge method\n    // console.log(dTime(), 'sheduled', this.dcID, this.iii)\n    if (this.offline || akStopped) {\n      log(`Cancel sheduled`)(``)\n      return false\n    }\n    delete this.nextReq\n    if (this.pendingAcks.length) {\n      const ackMsgIDs = []\n      for (const ack of this.pendingAcks)\n        ackMsgIDs.push(ack)\n      // console.log('acking messages', ackMsgIDs)\n      this.wrapMtpMessage({\n        _      : 'msgs_ack',\n        msg_ids: ackMsgIDs\n      }, {\n        notContentRelated: true,\n        noShedule        : true\n      })\n      // const res = await msg.deferred.promise\n      // log(`AWAITED`, `ack`)(res)\n    }\n\n    this.performResend()\n\n    const messages = []\n    let message: NetMessage\n    let messagesByteLen = 0\n    const currentTime = tsNow()\n    let hasApiCall = false\n    let hasHttpWait = false\n    let lengthOverflow = false\n    let singlesCount = 0\n\n    for (const [messageID, value] of this.state.pendingIterator()) {\n      if (value && value < currentTime) continue\n      this.state.deletePending(messageID)\n      if (!this.state.hasSent(messageID)) continue\n      message = this.state.getSent(messageID)\n      const messageByteLength = message.size() + 32\n      const cond1 = !message.notContentRelated && lengthOverflow\n      const cond2 =\n        !message.notContentRelated &&\n        messagesByteLen &&\n        //eslint-disable-next-line\n        messagesByteLen + messageByteLength > 655360; // 640 Kb\n      if (cond1) continue\n      if (cond2) {\n        lengthOverflow = true\n        continue\n      }\n      if (message.singleInRequest) {\n        singlesCount++\n        if (singlesCount > 1) continue\n      }\n      messages.push(message)\n      messagesByteLen += messageByteLength\n      if (message.isAPI)\n        hasApiCall = true\n      else if (message.longPoll)\n        hasHttpWait = true\n    }\n\n    if (hasApiCall && !hasHttpWait) {\n      const serializer = this.Serialization({ mtproto: true })\n      serializer.storeMethod('http_wait', {\n        max_delay : 500,\n        wait_after: 150,\n        max_wait  : 3000\n      })\n      messages.push(new NetMessage(\n        this.generateSeqNo(),\n        serializer.getBytes()\n      ))\n    }\n\n    if (!messages.length) {\n      // console.log('no sheduled messages')\n      return\n    }\n\n    const noResponseMsgs = []\n\n    if (messages.length > 1) {\n      const container = this.Serialization({ mtproto: true, startMaxLength: messagesByteLen + 64 })\n      const contBox = container.writer\n      WriteMediator.int(contBox, 0x73f1f8dc, 'CONTAINER[id]')\n      WriteMediator.int(contBox, messages.length, 'CONTAINER[count]')\n      const innerMessages = []\n      let i = 0\n      for (const msg of messages) {\n        WriteMediator.long(contBox, msg.msg_id, `CONTAINER[${i}][msg_id]`)\n        innerMessages.push(msg.msg_id)\n        WriteMediator.int(contBox, msg.seq_no, `CONTAINER[${i}][seq_no]`)\n        WriteMediator.int(contBox, msg.body.length, `CONTAINER[${i}][bytes]`)\n        WriteMediator.intBytes(contBox, msg.body, false, `CONTAINER[${i}][body]`)\n        if (msg.noResponse)\n          noResponseMsgs.push(msg.msg_id)\n        i++\n      }\n\n      message = new NetContainer(\n        this.generateSeqNo(true),\n        container.getBytes(true),\n        innerMessages)\n\n      log(`Container`)(innerMessages, message.msg_id, message.seq_no)\n    } else {\n      if (message.noResponse)\n        noResponseMsgs.push(message.msg_id)\n    }\n\n    this.state.addSent(message)\n\n    this.pendingAcks = [] //TODO WTF,he just clear and forget them at all?!?\n    if (lengthOverflow || singlesCount > 1) this.sheduleRequest()\n\n    try {\n      const result = await this.sendEncryptedRequest(message)\n      this.toggleOffline(false)\n      const response = await this.parseResponse(result.data)\n      log(`Server response`)(this.dcID, response)\n\n      this.processMessage(\n        response.response,\n        response.messageID,\n        response.sessionID)\n\n      for (const msgID of noResponseMsgs)\n        if (this.state.hasSent(msgID)) {\n          const msg = this.state.getSent(msgID)\n          this.state.deleteSent(msg)\n          msg.deferred.resolve()\n        }\n\n      this.checkConnectionPeriod = Math.max(1.1, Math.sqrt(this.checkConnectionPeriod))\n\n      return this.checkLongPoll() //TODO Bluebird warning here\n    } catch (error) {\n      console.log('Encrypted request failed', error)\n\n      if (message instanceof NetContainer) {\n        for (const msgID of message.inner)\n          this.state.setPending(msgID)\n        this.state.deleteSent(message)\n      } else\n        this.state.setPending(message.msg_id)\n\n\n      for (const msgID of noResponseMsgs)\n        if (this.state.hasSent(msgID)) {\n          const msg = this.state.getSent(msgID)\n          this.state.deleteSent(msg)\n          this.state.deletePending(msgID)\n          msg.deferred.reject()\n        }\n\n      this.toggleOffline(true)\n      return Promise.reject(error)\n    }\n  }\n\n\n  sendEncryptedRequest = async (message: NetMessage, options = {}) => {\n    // console.log(dTime(), 'Send encrypted'/*, message*/)\n    // console.trace()\n    const data = this.Serialization({ startMaxLength: message.body.length + 64 })\n    const dataBox = data.writer\n    WriteMediator.intBytes(dataBox, this.serverSalt, 64, 'salt')\n    WriteMediator.intBytes(dataBox, this.sessionID, 64, 'session_id')\n    WriteMediator.long(dataBox, message.msg_id, 'message_id')\n    WriteMediator.int(dataBox, message.seq_no, 'seq_no')\n\n    WriteMediator.int(dataBox, message.body.length, 'message_data_length')\n    WriteMediator.intBytes(dataBox, message.body, false, 'message_data')\n\n    const url = this.chooseServer(this.dcID, this.upload)\n\n    const bytes = dataBox.getBuffer()\n\n    const bytesHash = await CryptoWorker.sha1Hash(bytes)\n    const msgKey = new Uint8Array(bytesHash).subarray(4, 20)\n    const keyIv = await this.getMsgKeyIv(msgKey, true)\n    const encryptedBytes = await CryptoWorker.aesEncrypt(bytes, keyIv[0], keyIv[1])\n\n    const request = this.Serialization({ startMaxLength: encryptedBytes.byteLength + 256 })\n    const requestBox = request.writer\n    WriteMediator.intBytes(requestBox, this.authKeyID, 64, 'auth_key_id')\n    WriteMediator.intBytes(requestBox, msgKey, 128, 'msg_key')\n    WriteMediator.intBytes(requestBox, encryptedBytes, false, 'encrypted_data')\n\n    const requestData = xhrSendBuffer\n      ? requestBox.getArray().buffer\n      : requestBox.getArray()\n\n    options = { responseType: 'arraybuffer', ...options }\n\n    try {\n      const result = await httpClient.post(url, requestData, options)\n      return !result.data || !result.data.byteLength\n        ? Promise.reject(new ErrorBadResponse(url, result))\n        : result\n    } catch (error) {\n      return Promise.reject(new ErrorBadRequest(url, error))\n    }\n  }\n\n  getMsgById = ({ req_msg_id }) => this.state.getSent(req_msg_id)\n\n  async parseResponse(responseBuffer: Uint8Array) {\n    // console.log(dTime(), 'Start parsing response')\n    // const self = this\n\n    const deserializerRaw = this.Deserialization(responseBuffer)\n\n    const authKeyID = deserializerRaw.fetchIntBytes(64, 'auth_key_id')\n    if (!bytesCmp(authKeyID, this.authKeyID)) {\n      throw new Error(`[MT] Invalid server auth_key_id: ${  bytesToHex(authKeyID)}`)\n    }\n    const msgKey = deserializerRaw.fetchIntBytes(128, 'msg_key')\n    const encryptedData = deserializerRaw.fetchRawBytes(\n      responseBuffer.byteLength - deserializerRaw.getOffset(),\n      'encrypted_data')\n\n\n    const keyIv = await this.getMsgKeyIv(msgKey, false)\n    const dataWithPadding = await CryptoWorker.aesDecrypt(encryptedData, keyIv[0], keyIv[1])\n    // console.log(dTime(), 'after decrypt')\n    const deserializer = this.Deserialization(dataWithPadding, { mtproto: true })\n\n    deserializer.fetchIntBytes(64, 'salt')\n    const sessionID = deserializer.fetchIntBytes(64, 'session_id')\n    const messageID = ReadMediator.long( deserializer.typeBuffer, 'message_id')\n\n    const isInvalidSession =\n      !bytesCmp(sessionID, this.sessionID) && (\n        !this.prevSessionID ||\n        //eslint-disable-next-line\n        !bytesCmp(sessionID, this.prevSessionID));\n    if (isInvalidSession) {\n      console.warn('Sessions', sessionID, this.sessionID, this.prevSessionID)\n      throw new Error(`[MT] Invalid server session_id: ${ bytesToHex(sessionID) }`)\n    }\n\n    const seqNo = deserializer.fetchInt('seq_no')\n\n    let offset = deserializer.getOffset()\n    const totalLength = dataWithPadding.byteLength\n\n    const messageBodyLength = deserializer.fetchInt('message_data[length]')\n    if (messageBodyLength % 4 ||\n        messageBodyLength > totalLength - offset) {\n      throw new Error(`[MT] Invalid body length: ${  messageBodyLength}`)\n    }\n    const messageBody = deserializer.fetchRawBytes(messageBodyLength, 'message_data')\n\n    offset = deserializer.getOffset()\n    const paddingLength = totalLength - offset\n    if (paddingLength < 0 || paddingLength > 15)\n      throw new Error(`[MT] Invalid padding length: ${  paddingLength}`)\n    const hashData = convertToUint8Array(dataWithPadding).subarray(0, offset)\n\n    const dataHash = await CryptoWorker.sha1Hash(hashData)\n\n    if (!bytesCmp(msgKey, bytesFromArrayBuffer(dataHash).slice(-16))) {\n      console.warn(msgKey, bytesFromArrayBuffer(dataHash))\n      throw new Error('[MT] server msgKey mismatch')\n    }\n\n    const buffer = bytesToArrayBuffer(messageBody)\n    const deserializerOptions = getDeserializeOpts(this.getMsgById)\n    const deserializerData = this.Deserialization(buffer, deserializerOptions)\n    const response = deserializerData.fetchObject('', 'INPUT')\n\n    return {\n      response,\n      messageID,\n      sessionID,\n      seqNo\n    }\n  }\n\n  applyServerSalt(newServerSalt) {\n    const serverSalt = longToBytes(newServerSalt)\n    this.storage.set(`dc${ this.dcID }_server_salt`, bytesToHex(serverSalt))\n\n    this.serverSalt = serverSalt\n    return true\n  }\n\n  sheduleRequest(delay: number = 0) {\n    if (this.offline) this.checkConnection('forced shedule')\n    const nextReq = tsNow() + delay\n\n    if (delay && this.nextReq && this.nextReq <= nextReq)\n      return false\n\n    // console.log(dTime(), 'shedule req', delay)\n    // console.trace()\n    smartTimeout.cancel(this.nextReqPromise)\n    if (delay > 0)\n      this.nextReqPromise = smartTimeout(\n        this.performSheduledRequest, delay)\n    else\n      immediate(this.performSheduledRequest)\n\n    this.nextReq = nextReq\n  }\n\n  ackMessage(msgID: string) {\n    /*console.trace(msgID)\n    if (this.pendingAcks.includes(msgID)) {\n      debugger\n    }*/\n    // console.log('ack message', msgID)\n    if (contains(msgID, this.pendingAcks)) return\n    this.pendingAcks.push(msgID)\n    this.sheduleRequest(30000)\n  }\n\n  reqResendMessage(msgID: string) {\n    log(`Req resend`)(msgID)\n    this.state.addResend(msgID)\n    this.sheduleRequest(100)\n  }\n\n  cleanupSent() {\n    let notEmpty = false\n    // console.log('clean start', this.dcID/*, this.state.sent*/)\n\n    for (const [msgID, message] of this.state.sentIterator()) {\n      let complete = true\n      if (message.notContentRelated && !this.state.hasPending(msgID))\n        // console.log('clean notContentRelated', msgID)\n        this.state.deleteSent(message)\n      else if (message instanceof NetContainer) {\n        for (const inner of message.inner) {\n          if (this.state.hasSent(inner)) {\n            // console.log('clean failed, found', msgID, message.inner[i],\n            // this.state.getSent(message.inner[i]).seq_no)\n            notEmpty = true\n            complete = false\n            break\n          }\n        }\n        // console.log('clean container', msgID)\n        if (complete)\n          this.state.deleteSent(message)\n      } else\n        notEmpty = true\n    }\n    return !notEmpty\n  }\n\n  processMessageAck = (messageID: string) => {\n    const sentMessage = this.state.getSent(messageID)\n    if (sentMessage && !sentMessage.acked) {\n      delete sentMessage.body\n      sentMessage.acked = true\n      return true\n    }\n    return false\n  }\n\n  processError(rawError) {\n    const matches = (rawError.error_message || '').match(/^([A-Z_0-9]+\\b)(: (.+))?/) || []\n    rawError.error_code = uintToInt(rawError.error_code)\n\n    return {\n      code: !rawError.error_code || rawError.error_code <= 0\n        ? 500\n        : rawError.error_code,\n      type         : matches[1] || 'UNKNOWN',\n      description  : matches[3] || `CODE#${  rawError.error_code  } ${  rawError.error_message}`,\n      originalError: rawError\n    }\n  }\n\n  processMessage(message, messageID, sessionID) {\n    const msgidInt = parseInt(messageID.toString(10).substr(0, -10), 10)\n    if (msgidInt % 2) {\n      console.warn('[MT] Server even message id: ', messageID, message)\n      return\n    }\n    // console.log('process message', message, messageID, sessionID)\n    switch (message._) {\n      case 'msg_container': {\n        for (const inner of message.messages)\n          this.processMessage(inner, inner.msg_id, sessionID)\n        break\n      }\n      case 'bad_server_salt': {\n        log(`Bad server salt`)(message)\n        const sentMessage = this.state.getSent(message.bad_msg_id)\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\n          throw new Error('[MT] Bad server salt for invalid message')\n        }\n\n        this.applyServerSalt(message.new_server_salt)\n        this.pushResend(message.bad_msg_id)\n        this.ackMessage(messageID)\n        break\n      }\n      case 'bad_msg_notification': {\n        log(`Bad msg notification`)(message)\n        const sentMessage = this.state.getSent(message.bad_msg_id)\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\n          throw new Error('[MT] Bad msg notification for invalid message')\n        }\n\n        if (message.error_code == 16 || message.error_code == 17) {\n          if (applyServerTime(\n              rshift32(messageID)\n            )) {\n            log(`Update session`)()\n            this.updateSession()\n          }\n          const badMessage = this.updateSentMessage(message.bad_msg_id)\n          this.pushResend(badMessage.msg_id)\n          this.ackMessage(messageID)\n        }\n        break\n      }\n      case 'message': {\n        if (this.lastServerMessages.indexOf(messageID) != -1) {\n          // console.warn('[MT] Server same messageID: ', messageID)\n          this.ackMessage(messageID)\n          return\n        }\n        this.lastServerMessages.push(messageID)\n        if (this.lastServerMessages.length > 100) {\n          this.lastServerMessages.shift()\n        }\n        this.processMessage(message.body, message.msg_id, sessionID)\n        break\n      }\n      case 'new_session_created': {\n        this.ackMessage(messageID)\n\n        this.processMessageAck(message.first_msg_id)\n        this.applyServerSalt(message.server_salt)\n\n        const onBaseDc = baseDcID => {\n          const updateCond =\n            baseDcID === this.dcID &&\n            !this.upload &&\n            updatesProcessor\n          if (updateCond)\n            updatesProcessor(message, true)\n        }\n        this.storage.get('dc').then(onBaseDc)\n        break\n      }\n      case 'msgs_ack': {\n        message.msg_ids.forEach(this.processMessageAck)\n        break\n      }\n      case 'msg_detailed_info': {\n        if (!this.state.hasSent(message.msg_id)) {\n          this.ackMessage(message.answer_msg_id)\n          break\n        }\n        break\n      }\n      case 'msg_new_detailed_info': {\n        // this.ackMessage(message.answer_msg_id)\n        this.reqResendMessage(message.answer_msg_id)\n        break\n      }\n      case 'msgs_state_info': {\n        this.ackMessage(message.answer_msg_id)\n        const spliceCond =\n          this.lastResendReq &&\n          //eslint-disable-next-line\n          this.lastResendReq.req_msg_id == message.req_msg_id;\n        if (spliceCond)\n          for (const badMsgID of this.lastResendReq.resend_msg_ids)\n            this.state.deleteResent(badMsgID)\n        break\n      }\n      case 'rpc_result': {\n        this.ackMessage(messageID)\n\n        const sentMessageID = message.req_msg_id\n        const sentMessage = this.state.getSent(sentMessageID)\n\n        this.processMessageAck(sentMessageID)\n        if (!sentMessage) break\n\n        const deferred = sentMessage.deferred\n        if (message.result._ == 'rpc_error') {\n          const error = this.processError(message.result)\n          log(`ERROR, Rpc error`)('%O', error)\n          if (deferred) {\n            deferred.reject(error)\n          }\n        } else {\n          if (deferred) {\n            log(`Rpc response`)('%O', message.result)\n            /*if (debug) {\n              console.log(dTime(), 'Rpc response', message.result)\n            } else {\n              let dRes = message.result._\n              if (!dRes)\n                dRes = message.result.length > 5\n                  ? `[..${  message.result.length  }..]`\n                  : message.result\n              console.log(dTime(), 'Rpc response', dRes)\n            }*/\n            sentMessage.deferred.resolve(message.result)\n          }\n          if (sentMessage.isAPI)\n            this.connectionInited = true\n        }\n        this.state.deleteSent(sentMessage)\n        break\n      }\n      default: {\n        this.ackMessage(messageID)\n\n        // console.log('Update', message)\n        if (updatesProcessor) updatesProcessor(message, true)\n        break\n      }\n    }\n  }\n}\n\nexport type Networker = NetworkerThread\n\nexport const NetworkerFabric = (\n  appConfig,\n  { Serialization, Deserialization }: TLFabric,\n  storage,\n  emit: Emit) => chooseServer =>\n    (dc: number,\n    authKey: string,\n    serverSalt: string,\n    options: NetOptions = {}) =>\n      new NetworkerThread({\n        appConfig,\n        chooseServer,\n        Serialization,\n        Deserialization,\n        storage,\n        emit\n      }, dc, authKey, serverSalt, options)\n\n\nconst getDeserializeOpts = msgGetter => ({\n  mtproto : true,\n  override: {\n    mt_message(result, field) {\n      result.msg_id = ReadMediator.long( this.typeBuffer, `${ field }[msg_id]`)\n      result.seqno = ReadMediator.int( this.typeBuffer, `${ field }[seqno]`)\n      result.bytes = ReadMediator.int( this.typeBuffer, `${ field }[bytes]`)\n\n      const offset = this.getOffset()\n\n      try {\n        result.body = this.fetchObject('Object', `${ field }[body]`)\n      } catch (e) {\n        console.error(dTime(), 'parse error', e.message, e.stack)\n        result.body = { _: 'parse_error', error: e }\n      }\n      if (this.typeBuffer.offset != offset + result.bytes) {\n        // console.warn(dTime(), 'set offset', this.offset, offset, result.bytes)\n        // console.log(dTime(), result)\n        this.typeBuffer.offset = offset + result.bytes\n      }\n      // console.log(dTime(), 'override message', result)\n    },\n    mt_rpc_result(result, field: string) {\n      result.req_msg_id = ReadMediator.long( this.typeBuffer, `${ field }[req_msg_id]`)\n\n      const sentMessage = msgGetter(result)\n      const type = sentMessage && sentMessage.resultType || 'Object'\n\n      if (result.req_msg_id && !sentMessage) {\n        // console.warn(dTime(), 'Result for unknown message', result)\n        return\n      }\n      result.result = this.fetchObject(type, `${ field }[result]`)\n      // console.log(dTime(), 'override rpc_result', sentMessage, type, result)\n    }\n  }\n})\n\nexport const startAll = () => {\n  if (akStopped) {\n    akStopped = false\n    updatesProcessor({ _: 'new_session_created' }, true)\n  }\n}\n\nexport const stopAll = () => akStopped = true\n\nexport const setUpdatesProcessor = callback =>\n  updatesProcessor = callback\n\nexport default NetworkerFabric\n\n\nconst verifyInnerMessages = (messages) => {\n  if (messages.length !== new Set(messages).size) {\n    console.log(`!!!!!!WARN!!!!!!`, 'container check failed', messages)\n    // throw new Error('Container bug')\n  }\n}"]}