{"version":3,"sources":["../../../src/service/networker/index.js"],"names":["log","Logger","updatesProcessor","iii","akStopped","xhrSendBuffer","isNode","window","storeIntString","writer","value","field","WriteMediator","bytes","int","Error","NetworkerThread","constructor","appConfig","chooseServer","Serialization","Deserialization","storage","emit","dc","authKey","serverSalt","options","pendingAcks","state","State","connectionInited","checkConnectionPeriod","lastServerMessages","checkLongPollCond","longPollPending","offline","checkLongPollAfterDcCond","isClean","baseDc","dcID","upload","sleepAfter","checkLongPoll","cleanupSent","get","sendLongPoll","maxWait","wrapMtpCall","max_delay","wait_after","max_wait","noResponse","longPoll","event","smartTimeout","cancel","checkConnectionPromise","serializer","mtproto","pingID","storeMethod","ping_id","pingMessage","NetMessage","generateSeqNo","getBytes","succ","result","sendEncryptedRequest","timeout","toggleOffline","err","delay","checkConnection","Math","min","performSheduledRequest","nextReq","length","ackMsgIDs","ack","push","wrapMtpMessage","_","msg_ids","notContentRelated","noShedule","performResend","messages","message","messagesByteLen","currentTime","hasApiCall","hasHttpWait","lengthOverflow","singlesCount","pendingIterator","messageID","deletePending","hasSent","getSent","messageByteLength","size","cond1","cond2","singleInRequest","isAPI","noResponseMsgs","container","startMaxLength","contBox","innerMessages","i","msg","long","msg_id","seq_no","body","intBytes","NetContainer","addSent","sheduleRequest","response","parseResponse","data","processMessage","sessionID","msgID","deleteSent","deferred","resolve","max","sqrt","error","console","inner","setPending","reject","Promise","dataBox","url","getBuffer","bytesHash","CryptoWorker","sha1Hash","msgKey","Uint8Array","subarray","keyIv","getMsgKeyIv","encryptedBytes","aesEncrypt","request","byteLength","requestBox","authKeyID","mode","headers","method","Buffer","from","getBytesPlain","fetch","arrayBuffer","buffer","status","ErrorBadResponse","getMsgById","req_msg_id","processMessageAck","sentMessage","acked","authKeyUint8","authKeyBuffer","slice","wrapApiCall","bind","fileUpload","fileDownload","updateSession","setInterval","seqNo","prevSessionID","Array","updateSentMessage","sentMessageID","newInner","innerID","innerSentMessage","newId","params","pushMessage","promise","object","storeObject","verifyInnerMessages","JSON","stringify","serialBox","mapper","afterMessageID","resultType","copyOptions","Object","pushResend","isOut","x","sha1aText","sha1bText","sha1cText","sha1dText","promises","set","all","aesKey","aesIv","sha1a","sha1b","sha1c","sha1d","enabled","undefined","nextReqPromise","parseInt","onOnlineCb","then","hasResends","resendMsgIDs","getResends","resendOpts","lastResendReq","resend_msg_ids","responseBuffer","deserializerRaw","fetchIntBytes","encryptedData","fetchRawBytes","getOffset","dataWithPadding","aesDecrypt","deserializer","ReadMediator","typeBuffer","isInvalidSession","warn","fetchInt","offset","totalLength","messageBodyLength","messageBody","paddingLength","hashData","dataHash","deserializerOptions","getDeserializeOpts","deserializerData","fetchObject","applyServerSalt","newServerSalt","ackMessage","reqResendMessage","addResend","notEmpty","sentIterator","complete","hasPending","processError","rawError","matches","error_message","match","error_code","code","type","description","originalError","msgidInt","toString","substr","bad_msg_id","bad_msg_seqno","new_server_salt","badMessage","indexOf","shift","first_msg_id","server_salt","onBaseDc","baseDcID","updateCond","forEach","answer_msg_id","spliceCond","badMsgID","deleteResent","NetworkerFabric","msgGetter","override","mt_message","seqno","e","stack","mt_rpc_result","startAll","stopAll","setUpdatesProcessor","callback","Set"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\nimport isNode from 'detect-node'\n\nimport is from 'ramda/src/is'\nimport contains from 'ramda/src/contains'\nimport mapObjIndexed from 'ramda/src/mapObjIndexed'\n\nimport CryptoWorker from '../../crypto'\nimport { dTime, tsNow, generateID, applyServerTime } from '../time-manager'\nimport random from '../secure-random'\nimport { NetMessage, NetContainer } from './net-message'\nimport State from './state'\nimport smartTimeout, { immediate } from '../../util/smart-timeout'\nimport { httpClient } from '../../http'\n\nimport { ErrorBadRequest, ErrorBadResponse } from '../../error'\n\nimport Logger from '../../util/log'\n\nconst log = Logger`networker`\n\nimport { convertToUint8Array, convertToArrayBuffer, sha1BytesSync,\n  nextRandomInt, bytesCmp, bytesToHex, bytesFromArrayBuffer,\n  bytesToArrayBuffer, longToBytes, uintToInt, rshift32 } from '../../bin'\n\nimport type { TLFabric, SerializationFabric, DeserializationFabric } from '../../tl'\nimport { WriteMediator, ReadMediator, TypeWriter } from '../../tl'\nimport type { Emit } from '../main/index.h'\n\nlet updatesProcessor\nlet iii = 0\nlet akStopped = false\n\n//eslint-disable-next-line\nconst xhrSendBuffer = !isNode && !('ArrayBufferView' in window)\n\ntype NetOptions = {\n  fileUpload?: boolean,\n  fileDownload?: boolean,\n  notContentRelated?: boolean,\n  afterMessageID?: string,\n  resultType?: any\n}\ntype Bytes = number[]\n\ntype ContextConfig = {\n  Serialization: SerializationFabric,\n  Deserialization: DeserializationFabric,\n  emit: Emit\n}\n\nconst storeIntString = (writer: TypeWriter) => (value: number | string, field: string) => {\n  switch (typeof value) {\n    case 'string': return WriteMediator.bytes(writer, value, `${field}:string`)\n    case 'number': return WriteMediator.int(writer, value, field)\n    default: throw new Error(`tl storeIntString field ${field} value type ${typeof value}`)\n  }\n}\n\nexport class NetworkerThread {\n  dcID: number\n  authKey: string\n  authKeyUint8: Uint8Array\n  authKeyBuffer: ArrayBuffer\n  serverSalt: string\n  iii: number\n  authKeyID: Bytes\n  upload: boolean\n  pendingAcks: number[] = []\n  seqNo: number\n  sessionID: Bytes\n  prevSessionID: Bytes\n  state = new State\n  connectionInited = false\n  checkConnectionPeriod = 0\n  checkConnectionPromise: Promise<*>\n  Serialization: SerializationFabric\n  Deserialization: DeserializationFabric\n  emit: Emit\n  lastServerMessages: string[] = []\n  constructor(\n    {\n      appConfig,\n      chooseServer,\n      Serialization,\n      Deserialization,\n      storage,\n      emit\n    }: ContextConfig,\n    dc: number,\n    authKey: string,\n    serverSalt: string,\n    options: NetOptions) {\n    this.appConfig = appConfig\n    this.chooseServer = chooseServer\n    this.Serialization = Serialization\n    this.Deserialization = Deserialization\n    this.storage = storage\n    this.emit = emit\n    this.dcID = dc\n    this.iii = iii++\n\n    this.authKey = authKey\n    this.authKeyUint8 = convertToUint8Array(authKey)\n    this.authKeyBuffer = convertToArrayBuffer(authKey)\n    this.authKeyID = sha1BytesSync(authKey).slice(-8)\n\n    //$FlowIssue\n    this.wrapApiCall = this.wrapApiCall.bind(this)\n\n    this.serverSalt = serverSalt\n\n    this.upload = options.fileUpload || options.fileDownload || false\n\n    this.updateSession()\n\n    setInterval(this.checkLongPoll, 10000) //NOTE make configurable interval\n    this.checkLongPoll()\n  }\n  updateSession() {\n    this.seqNo = 0\n    this.prevSessionID = this.sessionID\n    this.sessionID = new Array(8)\n    random(this.sessionID)\n  }\n\n  updateSentMessage(sentMessageID: string) {\n    if (!this.state.hasSent(sentMessageID)) return false\n    const sentMessage = this.state.getSent(sentMessageID)\n\n    if (sentMessage instanceof NetContainer) {\n      const newInner = []\n      for (const innerID of sentMessage.inner) {\n        const innerSentMessage = this.updateSentMessage(innerID)\n        if (innerSentMessage)\n          newInner.push(innerSentMessage.msg_id)\n      }\n      sentMessage.inner = newInner\n    }\n    this.state.deleteSent(sentMessage)\n    const newId = generateID()\n    sentMessage.msg_id = newId\n    sentMessage.seq_no = this.generateSeqNo(\n      sentMessage.notContentRelated ||\n      sentMessage.container\n    )\n    this.state.addSent(sentMessage)\n\n    return sentMessage\n  }\n\n  generateSeqNo(notContentRelated?: boolean) {\n    let seqNo = this.seqNo * 2\n\n    if (!notContentRelated) {\n      seqNo++\n      this.seqNo++\n    }\n\n    return seqNo\n  }\n\n  wrapMtpCall(method: string, params: Object, options: NetOptions) {\n    const serializer = this.Serialization({ mtproto: true })\n\n    serializer.storeMethod(method, params)\n\n    const seqNo = this.generateSeqNo()\n    const message = new NetMessage(\n      seqNo,\n      serializer.getBytes(true)\n    )\n    log([`MT call`])(method, params, message.msg_id, seqNo)\n\n    this.pushMessage(message, options)\n    return message.deferred.promise\n  }\n\n  wrapMtpMessage(object: Object, options: NetOptions = {}) {\n\n    const serializer = this.Serialization({ mtproto: true })\n    serializer.storeObject(object, 'Object')\n\n    const seqNo = this.generateSeqNo(options.notContentRelated)\n    const message = new NetMessage(\n      seqNo,\n      serializer.getBytes(true)\n    )\n    log(`MT message`)(message.msg_id, object, seqNo)\n    verifyInnerMessages(object.msg_ids)\n    this.pushMessage(message, options)\n    return message\n  }\n\n  wrapApiCall(method: string, params: Object, options: NetOptions) {\n    console.log('[WrapApiCall:0]', method, params, JSON.stringify(options))\n    console.log('[WrapApiCall:1] appConfig:', JSON.stringify(this.appConfig))\n    const serializer = this.Serialization(options)\n    const serialBox = serializer.writer\n    console.log('[WrapApiCall:2] connectionInited:', this.connectionInited)\n    if (!this.connectionInited) {\n      // serializer.storeInt(0xda9b0d0d, 'invokeWithLayer')\n      // serializer.storeInt(Config.Schema.API.layer, 'layer')\n      // serializer.storeInt(0x69796de9, 'initConnection')\n      // serializer.storeInt(Config.App.id, 'api_id')\n      // serializer.storeString(navigator.userAgent || 'Unknown UserAgent', 'device_model')\n      // serializer.storeString(navigator.platform || 'Unknown Platform', 'system_version')\n      // serializer.storeString(Config.App.version, 'app_version')\n      // serializer.storeString(navigator.language || 'en', 'lang_code')\n      const mapper = storeIntString(serialBox)\n      mapObjIndexed(mapper, this.appConfig)\n    }\n\n    if (options.afterMessageID) {\n      WriteMediator.int(serialBox, 0xcb9f372d, 'invokeAfterMsg')\n      WriteMediator.long(serialBox, options.afterMessageID, 'msg_id')\n    }\n\n    options.resultType = serializer.storeMethod(method, params)\n    console.log('[WrapApiCall:3] options:', JSON.stringify(options))\n\n    const seqNo = this.generateSeqNo()\n    const message = new NetMessage(\n      seqNo,\n      serializer.getBytes(true)\n    )\n    message.isAPI = true\n\n    log([`Api call`])(method, params, message.msg_id, seqNo, options)\n\n    this.pushMessage(message, options)\n    return message.deferred.promise\n  }\n\n  checkLongPollCond = () =>\n    this.longPollPending &&\n      this.longPollPending > tsNow() ||\n    !!this.offline ||\n    akStopped\n\n  checkLongPollAfterDcCond = (isClean: boolean, baseDc: number) => isClean && (\n    this.dcID !== baseDc ||\n    this.upload ||\n    this.sleepAfter &&\n      this.sleepAfter < tsNow()\n  )\n\n  checkLongPoll = async () => {\n    const isClean = this.cleanupSent()\n    // console.log('Check lp', this.longPollPending, tsNow(), this.dcID, isClean)\n    // if (this.checkLongPollCond()) // Comment as long poll doesn't work properly on mobile\n    return false\n\n    const baseDc: number = await this.storage.get('dc')\n    if (this.checkLongPollAfterDcCond(isClean, baseDc))\n      // console.warn(dTime(), 'Send long-poll for DC is delayed', this.dcID, this.sleepAfter)\n      return\n    return this.sendLongPoll()\n  }\n\n  sendLongPoll: () => Promise<boolean | void> = async () => {\n    const maxWait = 25000\n    this.longPollPending = tsNow() + maxWait\n    // console.log('Set lp', this.longPollPending, tsNow())\n\n    await this.wrapMtpCall('http_wait', {\n      max_delay : 500,\n      wait_after: 150,\n      max_wait  : maxWait\n    }, {\n      noResponse: true,\n      longPoll  : true\n    })\n    delete this.longPollPending\n    return this.checkLongPoll()\n  }\n\n  pushMessage(message: NetMessage, options: NetOptions = {}) {\n    message.copyOptions(options)\n    this.state.addSent(message)\n    this.state.setPending(message.msg_id)\n\n    if (!options || !options.noShedule)\n      this.sheduleRequest()\n    if (is(Object, options))\n      options.messageID = message.msg_id\n  }\n\n  pushResend(messageID: string, delay?: number) {\n    const value = delay\n      ? tsNow() + delay\n      : 0\n    const sentMessage = this.state.getSent(messageID)\n    if (sentMessage instanceof NetContainer)\n      for (const msg of sentMessage.inner)\n        this.state.setPending(msg, value)\n    else\n      this.state.setPending(messageID, value)\n\n    this.sheduleRequest(delay)\n  }\n\n  async getMsgKeyIv(msgKey: number[], isOut: boolean) {\n    const authKey = this.authKeyUint8\n    const x = isOut\n      ? 0\n      : 8\n    const sha1aText = new Uint8Array(48)\n    const sha1bText = new Uint8Array(48)\n    const sha1cText = new Uint8Array(48)\n    const sha1dText = new Uint8Array(48)\n    const promises = []\n\n    sha1aText.set(msgKey, 0)\n    sha1aText.set(authKey.subarray(x, x + 32), 16)\n    promises.push(CryptoWorker.sha1Hash(sha1aText))\n\n    sha1bText.set(authKey.subarray(x + 32, x + 48), 0)\n    sha1bText.set(msgKey, 16)\n    sha1bText.set(authKey.subarray(x + 48, x + 64), 32)\n    promises.push(CryptoWorker.sha1Hash(sha1bText))\n\n    sha1cText.set(authKey.subarray(x + 64, x + 96), 0)\n    sha1cText.set(msgKey, 32)\n    promises.push(CryptoWorker.sha1Hash(sha1cText))\n\n    sha1dText.set(msgKey, 0)\n    sha1dText.set(authKey.subarray(x + 96, x + 128), 16)\n    promises.push(CryptoWorker.sha1Hash(sha1dText))\n\n    const result = await Promise.all(promises)\n    const aesKey = new Uint8Array(32),\n          aesIv = new Uint8Array(32),\n          sha1a = new Uint8Array(result[0]),\n          sha1b = new Uint8Array(result[1]),\n          sha1c = new Uint8Array(result[2]),\n          sha1d = new Uint8Array(result[3])\n\n    aesKey.set(sha1a.subarray(0, 8))\n    aesKey.set(sha1b.subarray(8, 20), 8)\n    aesKey.set(sha1c.subarray(4, 16), 20)\n\n    aesIv.set(sha1a.subarray(8, 20))\n    aesIv.set(sha1b.subarray(0, 8), 12)\n    aesIv.set(sha1c.subarray(16, 20), 20)\n    aesIv.set(sha1d.subarray(0, 8), 24)\n\n    return [aesKey, aesIv]\n  }\n\n  checkConnection = async event => {\n    log([`Check connection`])('%O', event)\n    smartTimeout.cancel(this.checkConnectionPromise)\n\n    const serializer = this.Serialization({ mtproto: true })\n    const pingID = [nextRandomInt(0xFFFFFFFF), nextRandomInt(0xFFFFFFFF)]\n\n    serializer.storeMethod('ping', { ping_id: pingID })\n\n    const pingMessage = new NetMessage(\n      this.generateSeqNo(true),\n      serializer.getBytes()\n    )\n\n    let succ = false\n\n    try {\n      const result = await this.sendEncryptedRequest(pingMessage, { timeout: 15000 })\n      succ = true\n      this.toggleOffline(false)\n      log(`checkConnection, result`)('%O', result)\n    } catch (err) {\n      log(`encrypted request fail`)('%O', err)\n    }\n    if (succ) return\n    const delay = this.checkConnectionPeriod * 1e3\n    log(`checkConnection, Delay`)(delay)\n    this.checkConnectionPromise = smartTimeout(\n          this.checkConnection, delay)\n    this.checkConnectionPeriod = Math.min(60, this.checkConnectionPeriod * 1.5)\n  }\n\n  toggleOffline(enabled) {\n    // console.log('toggle ', enabled, this.dcID, this.iii)\n    if (!this.offline !== undefined && this.offline == enabled)\n      return false\n\n    this.offline = enabled\n\n    if (this.offline) {\n      smartTimeout.cancel(this.nextReqPromise)\n      delete this.nextReq\n\n      if (this.checkConnectionPeriod < 1.5)\n        this.checkConnectionPeriod = 0\n\n\n      this.checkConnectionPromise = smartTimeout(\n        this.checkConnection, parseInt(this.checkConnectionPeriod * 1000))\n      this.checkConnectionPeriod = Math.min(30, (1 + this.checkConnectionPeriod) * 1.5)\n\n      this.onOnlineCb = this.checkConnection\n      this.emit('net.offline', this.onOnlineCb)\n    } else {\n      delete this.longPollPending\n      //NOTE check long state was here\n      this.checkLongPoll().then(() => {})\n      this.sheduleRequest()\n\n      if (this.onOnlineCb)\n        this.emit('net.online', this.onOnlineCb)\n\n      smartTimeout.cancel(this.checkConnectionPromise)\n\n    }\n  }\n  performResend() {\n    if (this.state.hasResends()) {\n      const resendMsgIDs = [...this.state.getResends()]\n      const resendOpts = { noShedule: true, notContentRelated: true }\n      // console.log('resendReq messages', resendMsgIDs)\n      const msg = this.wrapMtpMessage({\n        _      : 'msg_resend_req',\n        msg_ids: resendMsgIDs\n      }, resendOpts)\n      this.lastResendReq = { req_msg_id: msg.msg_id, resend_msg_ids: resendMsgIDs }\n    }\n  }\n  performSheduledRequest = async () => { //TODO extract huge method\n    // console.log(dTime(), 'sheduled', this.dcID, this.iii)\n    if (this.offline || akStopped) {\n      log(`Cancel sheduled`)(``)\n      return false\n    }\n    delete this.nextReq\n    if (this.pendingAcks.length) {\n      const ackMsgIDs = []\n      for (const ack of this.pendingAcks)\n        ackMsgIDs.push(ack)\n      // console.log('acking messages', ackMsgIDs)\n      this.wrapMtpMessage({\n        _      : 'msgs_ack',\n        msg_ids: ackMsgIDs\n      }, {\n        notContentRelated: true,\n        noShedule        : true\n      })\n      // const res = await msg.deferred.promise\n      // log(`AWAITED`, `ack`)(res)\n    }\n\n    this.performResend()\n\n    const messages = []\n    let message: NetMessage\n    let messagesByteLen = 0\n    const currentTime = tsNow()\n    let hasApiCall = false\n    let hasHttpWait = false\n    let lengthOverflow = false\n    let singlesCount = 0\n\n    for (const [messageID, value] of this.state.pendingIterator()) {\n      if (value && value < currentTime) continue\n      this.state.deletePending(messageID)\n      if (!this.state.hasSent(messageID)) continue\n      message = this.state.getSent(messageID)\n      const messageByteLength = message.size() + 32\n      const cond1 = !message.notContentRelated && lengthOverflow\n      const cond2 =\n        !message.notContentRelated &&\n        messagesByteLen &&\n        //eslint-disable-next-line\n        messagesByteLen + messageByteLength > 655360; // 640 Kb\n      if (cond1) continue\n      if (cond2) {\n        lengthOverflow = true\n        continue\n      }\n      if (message.singleInRequest) {\n        singlesCount++\n        if (singlesCount > 1) continue\n      }\n      messages.push(message)\n      messagesByteLen += messageByteLength\n      if (message.isAPI)\n        hasApiCall = true\n      else if (message.longPoll)\n        hasHttpWait = true\n    }\n\n    if (hasApiCall && !hasHttpWait) {\n      const serializer = this.Serialization({ mtproto: true })\n      serializer.storeMethod('http_wait', {\n        max_delay : 500,\n        wait_after: 150,\n        max_wait  : 3000\n      })\n      messages.push(new NetMessage(\n        this.generateSeqNo(),\n        serializer.getBytes()\n      ))\n    }\n\n    if (!messages.length) {\n      // console.log('no sheduled messages')\n      return\n    }\n\n    const noResponseMsgs = []\n\n    if (messages.length > 1) {\n      const container = this.Serialization({ mtproto: true, startMaxLength: messagesByteLen + 64 })\n      const contBox = container.writer\n      WriteMediator.int(contBox, 0x73f1f8dc, 'CONTAINER[id]')\n      WriteMediator.int(contBox, messages.length, 'CONTAINER[count]')\n      const innerMessages = []\n      let i = 0\n      for (const msg of messages) {\n        WriteMediator.long(contBox, msg.msg_id, `CONTAINER[${i}][msg_id]`)\n        innerMessages.push(msg.msg_id)\n        WriteMediator.int(contBox, msg.seq_no, `CONTAINER[${i}][seq_no]`)\n        WriteMediator.int(contBox, msg.body.length, `CONTAINER[${i}][bytes]`)\n        WriteMediator.intBytes(contBox, msg.body, false, `CONTAINER[${i}][body]`)\n        if (msg.noResponse)\n          noResponseMsgs.push(msg.msg_id)\n        i++\n      }\n\n      message = new NetContainer(\n        this.generateSeqNo(true),\n        container.getBytes(true),\n        innerMessages)\n\n      log(`Container`)(innerMessages, message.msg_id, message.seq_no)\n    } else {\n      if (message.noResponse)\n        noResponseMsgs.push(message.msg_id)\n    }\n\n    this.state.addSent(message)\n\n    this.pendingAcks = [] //TODO WTF,he just clear and forget them at all?!?\n    if (lengthOverflow || singlesCount > 1) this.sheduleRequest()\n\n    try {\n      const result = await this.sendEncryptedRequest(message)\n      this.toggleOffline(false)\n      const response = await this.parseResponse(result.data)\n      log(`Server response`)(this.dcID, response)\n\n      this.processMessage(\n        response.response,\n        response.messageID,\n        response.sessionID)\n\n      for (const msgID of noResponseMsgs)\n        if (this.state.hasSent(msgID)) {\n          const msg = this.state.getSent(msgID)\n          this.state.deleteSent(msg)\n          msg.deferred.resolve()\n        }\n\n      this.checkConnectionPeriod = Math.max(1.1, Math.sqrt(this.checkConnectionPeriod))\n\n      return this.checkLongPoll() //TODO Bluebird warning here\n    } catch (error) {\n      console.log('Encrypted request failed', error)\n\n      if (message instanceof NetContainer) {\n        for (const msgID of message.inner)\n          this.state.setPending(msgID)\n        this.state.deleteSent(message)\n      } else\n        this.state.setPending(message.msg_id)\n\n\n      for (const msgID of noResponseMsgs)\n        if (this.state.hasSent(msgID)) {\n          const msg = this.state.getSent(msgID)\n          this.state.deleteSent(msg)\n          this.state.deletePending(msgID)\n          msg.deferred.reject()\n        }\n\n      this.toggleOffline(true)\n      return Promise.reject(error)\n    }\n  }\n\n\n  sendEncryptedRequest = async (message: NetMessage, options = {}) => {\n    // console.log(dTime(), 'Send encrypted'/*, message*/)\n    // console.trace()\n    const data = this.Serialization({ startMaxLength: message.body.length + 64 })\n    const dataBox = data.writer\n    WriteMediator.intBytes(dataBox, this.serverSalt, 64, 'salt')\n    WriteMediator.intBytes(dataBox, this.sessionID, 64, 'session_id')\n    WriteMediator.long(dataBox, message.msg_id, 'message_id')\n    WriteMediator.int(dataBox, message.seq_no, 'seq_no')\n\n    WriteMediator.int(dataBox, message.body.length, 'message_data_length')\n    WriteMediator.intBytes(dataBox, message.body, false, 'message_data')\n\n    const url = this.chooseServer(this.dcID, this.upload)\n\n    const bytes = dataBox.getBuffer()\n\n    const bytesHash = await CryptoWorker.sha1Hash(bytes)\n    const msgKey = new Uint8Array(bytesHash).subarray(4, 20)\n    const keyIv = await this.getMsgKeyIv(msgKey, true)\n    const encryptedBytes = await CryptoWorker.aesEncrypt(bytes, keyIv[0], keyIv[1])\n\n    const request = this.Serialization({ startMaxLength: encryptedBytes.byteLength + 256 })\n    const requestBox = request.writer\n    WriteMediator.intBytes(requestBox, this.authKeyID, 64, 'auth_key_id')\n    WriteMediator.intBytes(requestBox, msgKey, 128, 'msg_key')\n    WriteMediator.intBytes(requestBox, encryptedBytes, false, 'encrypted_data')\n\n    /* const requestData = xhrSendBuffer\n      ? requestBox.getArray().buffer\n      : requestBox.getArray()\n\n    options = { responseType: 'arraybuffer', ...options }\n\n    try {\n      const result = await httpClient.post(url, requestData, options)\n      return !result.data || !result.data.byteLength\n        ? Promise.reject(new ErrorBadResponse(url, result))\n        : result\n    } catch (error) {\n      return Promise.reject(new ErrorBadRequest(url, error))\n    } */\n\n    try {\n      const request = {\n            mode   : 'cors',\n            headers: {\n                'Content-Type': 'application/octet',\n            },\n            method: 'POST',\n            body  : Buffer.from(requestBox.getBytesPlain()),\n      }\n      const result = await fetch(url, request)\n      const data = new Uint8Array(await result.arrayBuffer()).buffer\n      return result.status === 404 || !data || !data.byteLength\n        ? Promise.reject(new ErrorBadResponse(url, data))\n        : { data }\n    } catch (error) {\n      return Promise.reject(new ErrorBadResponse(url, error))\n    }\n  }\n\n  getMsgById = ({ req_msg_id }) => this.state.getSent(req_msg_id)\n\n  async parseResponse(responseBuffer: Uint8Array) {\n    // console.log(dTime(), 'Start parsing response')\n    // const self = this\n\n    const deserializerRaw = this.Deserialization(responseBuffer)\n\n    const authKeyID = deserializerRaw.fetchIntBytes(64, 'auth_key_id')\n    if (!bytesCmp(authKeyID, this.authKeyID)) {\n      throw new Error(`[MT] Invalid server auth_key_id: ${  bytesToHex(authKeyID)}`)\n    }\n    const msgKey = deserializerRaw.fetchIntBytes(128, 'msg_key')\n    const encryptedData = deserializerRaw.fetchRawBytes(\n      responseBuffer.byteLength - deserializerRaw.getOffset(),\n      'encrypted_data')\n\n\n    const keyIv = await this.getMsgKeyIv(msgKey, false)\n    const dataWithPadding = await CryptoWorker.aesDecrypt(encryptedData, keyIv[0], keyIv[1])\n    // console.log(dTime(), 'after decrypt')\n    const deserializer = this.Deserialization(dataWithPadding, { mtproto: true })\n\n    deserializer.fetchIntBytes(64, 'salt')\n    const sessionID = deserializer.fetchIntBytes(64, 'session_id')\n    const messageID = ReadMediator.long( deserializer.typeBuffer, 'message_id')\n\n    const isInvalidSession =\n      !bytesCmp(sessionID, this.sessionID) && (\n        !this.prevSessionID ||\n        //eslint-disable-next-line\n        !bytesCmp(sessionID, this.prevSessionID));\n    if (isInvalidSession) {\n      console.warn('Sessions', sessionID, this.sessionID, this.prevSessionID)\n      throw new Error(`[MT] Invalid server session_id: ${ bytesToHex(sessionID) }`)\n    }\n\n    const seqNo = deserializer.fetchInt('seq_no')\n\n    let offset = deserializer.getOffset()\n    const totalLength = dataWithPadding.byteLength\n\n    const messageBodyLength = deserializer.fetchInt('message_data[length]')\n    if (messageBodyLength % 4 ||\n        messageBodyLength > totalLength - offset) {\n      throw new Error(`[MT] Invalid body length: ${  messageBodyLength}`)\n    }\n    const messageBody = deserializer.fetchRawBytes(messageBodyLength, 'message_data')\n\n    offset = deserializer.getOffset()\n    const paddingLength = totalLength - offset\n    if (paddingLength < 0 || paddingLength > 15)\n      throw new Error(`[MT] Invalid padding length: ${  paddingLength}`)\n    const hashData = convertToUint8Array(dataWithPadding).subarray(0, offset)\n\n    const dataHash = await CryptoWorker.sha1Hash(hashData)\n\n    if (!bytesCmp(msgKey, bytesFromArrayBuffer(dataHash).slice(-16))) {\n      console.warn(msgKey, bytesFromArrayBuffer(dataHash))\n      throw new Error('[MT] server msgKey mismatch')\n    }\n\n    const buffer = bytesToArrayBuffer(messageBody)\n    const deserializerOptions = getDeserializeOpts(this.getMsgById)\n    const deserializerData = this.Deserialization(buffer, deserializerOptions)\n    const response = deserializerData.fetchObject('', 'INPUT')\n\n    return {\n      response,\n      messageID,\n      sessionID,\n      seqNo\n    }\n  }\n\n  applyServerSalt(newServerSalt) {\n    const serverSalt = longToBytes(newServerSalt)\n    this.storage.set(`dc${ this.dcID }_server_salt`, bytesToHex(serverSalt))\n\n    this.serverSalt = serverSalt\n    return true\n  }\n\n  sheduleRequest(delay: number = 0) {\n    if (this.offline) this.checkConnection('forced shedule')\n    const nextReq = tsNow() + delay\n\n    if (delay && this.nextReq && this.nextReq <= nextReq)\n      return false\n\n    // console.log(dTime(), 'shedule req', delay)\n    // console.trace()\n    smartTimeout.cancel(this.nextReqPromise)\n    if (delay > 0)\n      this.nextReqPromise = smartTimeout(\n        this.performSheduledRequest, delay)\n    else\n      immediate(this.performSheduledRequest)\n\n    this.nextReq = nextReq\n  }\n\n  ackMessage(msgID: string) {\n    /*console.trace(msgID)\n    if (this.pendingAcks.includes(msgID)) {\n      debugger\n    }*/\n    // console.log('ack message', msgID)\n    if (contains(msgID, this.pendingAcks)) return\n    this.pendingAcks.push(msgID)\n    this.sheduleRequest(30000)\n  }\n\n  reqResendMessage(msgID: string) {\n    log(`Req resend`)(msgID)\n    this.state.addResend(msgID)\n    this.sheduleRequest(100)\n  }\n\n  cleanupSent() {\n    let notEmpty = false\n    // console.log('clean start', this.dcID/*, this.state.sent*/)\n\n    for (const [msgID, message] of this.state.sentIterator()) {\n      let complete = true\n      if (message.notContentRelated && !this.state.hasPending(msgID))\n        // console.log('clean notContentRelated', msgID)\n        this.state.deleteSent(message)\n      else if (message instanceof NetContainer) {\n        for (const inner of message.inner) {\n          if (this.state.hasSent(inner)) {\n            // console.log('clean failed, found', msgID, message.inner[i],\n            // this.state.getSent(message.inner[i]).seq_no)\n            notEmpty = true\n            complete = false\n            break\n          }\n        }\n        // console.log('clean container', msgID)\n        if (complete)\n          this.state.deleteSent(message)\n      } else\n        notEmpty = true\n    }\n    return !notEmpty\n  }\n\n  processMessageAck = (messageID: string) => {\n    const sentMessage = this.state.getSent(messageID)\n    if (sentMessage && !sentMessage.acked) {\n      delete sentMessage.body\n      sentMessage.acked = true\n      return true\n    }\n    return false\n  }\n\n  processError(rawError) {\n    const matches = (rawError.error_message || '').match(/^([A-Z_0-9]+\\b)(: (.+))?/) || []\n    rawError.error_code = uintToInt(rawError.error_code)\n\n    return {\n      code: !rawError.error_code || rawError.error_code <= 0\n        ? 500\n        : rawError.error_code,\n      type         : matches[1] || 'UNKNOWN',\n      description  : matches[3] || `CODE#${  rawError.error_code  } ${  rawError.error_message}`,\n      originalError: rawError\n    }\n  }\n\n  processMessage(message, messageID, sessionID) {\n    const msgidInt = parseInt(messageID.toString(10).substr(0, -10), 10)\n    if (msgidInt % 2) {\n      console.warn('[MT] Server even message id: ', messageID, message)\n      return\n    }\n    // console.log('process message', message, messageID, sessionID)\n    switch (message._) {\n      case 'msg_container': {\n        for (const inner of message.messages)\n          this.processMessage(inner, inner.msg_id, sessionID)\n        break\n      }\n      case 'bad_server_salt': {\n        log(`Bad server salt`)(message)\n        const sentMessage = this.state.getSent(message.bad_msg_id)\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\n          throw new Error('[MT] Bad server salt for invalid message')\n        }\n\n        this.applyServerSalt(message.new_server_salt)\n        this.pushResend(message.bad_msg_id)\n        this.ackMessage(messageID)\n        break\n      }\n      case 'bad_msg_notification': {\n        log(`Bad msg notification`)(message)\n        const sentMessage = this.state.getSent(message.bad_msg_id)\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\n          throw new Error('[MT] Bad msg notification for invalid message')\n        }\n\n        if (message.error_code == 16 || message.error_code == 17) {\n          if (applyServerTime(\n              rshift32(messageID)\n            )) {\n            log(`Update session`)()\n            this.updateSession()\n          }\n          const badMessage = this.updateSentMessage(message.bad_msg_id)\n          this.pushResend(badMessage.msg_id)\n          this.ackMessage(messageID)\n        }\n        break\n      }\n      case 'message': {\n        if (this.lastServerMessages.indexOf(messageID) != -1) {\n          // console.warn('[MT] Server same messageID: ', messageID)\n          this.ackMessage(messageID)\n          return\n        }\n        this.lastServerMessages.push(messageID)\n        if (this.lastServerMessages.length > 100) {\n          this.lastServerMessages.shift()\n        }\n        this.processMessage(message.body, message.msg_id, sessionID)\n        break\n      }\n      case 'new_session_created': {\n        this.ackMessage(messageID)\n\n        this.processMessageAck(message.first_msg_id)\n        this.applyServerSalt(message.server_salt)\n\n        const onBaseDc = baseDcID => {\n          const updateCond =\n            baseDcID === this.dcID &&\n            !this.upload &&\n            updatesProcessor\n          if (updateCond)\n            updatesProcessor(message, true)\n        }\n        this.storage.get('dc').then(onBaseDc)\n        break\n      }\n      case 'msgs_ack': {\n        message.msg_ids.forEach(this.processMessageAck)\n        break\n      }\n      case 'msg_detailed_info': {\n        if (!this.state.hasSent(message.msg_id)) {\n          this.ackMessage(message.answer_msg_id)\n          break\n        }\n        break\n      }\n      case 'msg_new_detailed_info': {\n        // this.ackMessage(message.answer_msg_id)\n        this.reqResendMessage(message.answer_msg_id)\n        break\n      }\n      case 'msgs_state_info': {\n        this.ackMessage(message.answer_msg_id)\n        const spliceCond =\n          this.lastResendReq &&\n          //eslint-disable-next-line\n          this.lastResendReq.req_msg_id == message.req_msg_id;\n        if (spliceCond)\n          for (const badMsgID of this.lastResendReq.resend_msg_ids)\n            this.state.deleteResent(badMsgID)\n        break\n      }\n      case 'rpc_result': {\n        this.ackMessage(messageID)\n\n        const sentMessageID = message.req_msg_id\n        const sentMessage = this.state.getSent(sentMessageID)\n\n        this.processMessageAck(sentMessageID)\n        if (!sentMessage) break\n\n        const deferred = sentMessage.deferred\n        if (message.result._ == 'rpc_error') {\n          const error = this.processError(message.result)\n          log(`ERROR, Rpc error`)(error)\n          if (deferred) {\n            deferred.reject(error)\n          }\n        } else {\n          if (deferred) {\n            log(`Rpc response`)(message.result)\n            /*if (debug) {\n              console.log(dTime(), 'Rpc response', message.result)\n            } else {\n              let dRes = message.result._\n              if (!dRes)\n                dRes = message.result.length > 5\n                  ? `[..${  message.result.length  }..]`\n                  : message.result\n              console.log(dTime(), 'Rpc response', dRes)\n            }*/\n            sentMessage.deferred.resolve(message.result)\n          }\n          if (sentMessage.isAPI)\n            this.connectionInited = true\n        }\n        this.state.deleteSent(sentMessage)\n        break\n      }\n      default: {\n        this.ackMessage(messageID)\n\n        // console.log('Update', message)\n        if (updatesProcessor) updatesProcessor(message, true)\n        break\n      }\n    }\n  }\n}\n\nexport type Networker = NetworkerThread\n\nexport const NetworkerFabric = (\n  appConfig,\n  { Serialization, Deserialization }: TLFabric,\n  storage,\n  emit: Emit) => chooseServer =>\n    (dc: number,\n    authKey: string,\n    serverSalt: string,\n    options: NetOptions = {}) =>\n      new NetworkerThread({\n        appConfig,\n        chooseServer,\n        Serialization,\n        Deserialization,\n        storage,\n        emit\n      }, dc, authKey, serverSalt, options)\n\n\nconst getDeserializeOpts = msgGetter => ({\n  mtproto : true,\n  override: {\n    mt_message(result, field) {\n      result.msg_id = ReadMediator.long( this.typeBuffer, `${ field }[msg_id]`)\n      result.seqno = ReadMediator.int( this.typeBuffer, `${ field }[seqno]`)\n      result.bytes = ReadMediator.int( this.typeBuffer, `${ field }[bytes]`)\n\n      const offset = this.getOffset()\n\n      try {\n        result.body = this.fetchObject('Object', `${ field }[body]`)\n      } catch (e) {\n        console.error(dTime(), 'parse error', e.message, e.stack)\n        result.body = { _: 'parse_error', error: e }\n      }\n      if (this.typeBuffer.offset != offset + result.bytes) {\n        // console.warn(dTime(), 'set offset', this.offset, offset, result.bytes)\n        // console.log(dTime(), result)\n        this.typeBuffer.offset = offset + result.bytes\n      }\n      // console.log(dTime(), 'override message', result)\n    },\n    mt_rpc_result(result, field: string) {\n      result.req_msg_id = ReadMediator.long( this.typeBuffer, `${ field }[req_msg_id]`)\n\n      const sentMessage = msgGetter(result)\n      const type = sentMessage && sentMessage.resultType || 'Object'\n\n      if (result.req_msg_id && !sentMessage) {\n        // console.warn(dTime(), 'Result for unknown message', result)\n        return\n      }\n      result.result = this.fetchObject(type, `${ field }[result]`)\n      // console.log(dTime(), 'override rpc_result', sentMessage, type, result)\n    }\n  }\n})\n\nexport const startAll = () => {\n  if (akStopped) {\n    akStopped = false\n    updatesProcessor({ _: 'new_session_created' }, true)\n  }\n}\n\nexport const stopAll = () => akStopped = true\n\nexport const setUpdatesProcessor = callback =>\n  updatesProcessor = callback\n\nexport default NetworkerFabric\n\n\nconst verifyInnerMessages = (messages) => {\n  if (messages.length !== new Set(messages).size) {\n    console.log(`!!!!!!WARN!!!!!!`, 'container check failed', messages)\n    // throw new Error('Container bug')\n  }\n}\n"]}