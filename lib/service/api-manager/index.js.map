{"version":3,"sources":["../../../src/service/api-manager/index.js"],"names":["debug","Logger","hasPath","isNil","baseDcID","Ln","length","obj","ApiManager","constructor","config","tls","netFabric","on","emit","cache","uploader","downloader","auth","servers","keysParsed","networkSetter","dc","options","authKey","serverSalt","networker","networkFabric","dcID","Error","akk","ssk","dcUrl","chooseServer","authKeyHex","storage","get","serverSaltHex","createNetworker","AuthKeyError","error","netError","set","mtpGetNetworker","method","params","deferred","rejectPromise","err","type","input","Object","message","reject","noErrorBox","initConnection","requestThunk","req","performRequest","waitTime","cfg","getNetworker","netOpts","Request","then","resolve","deferResolve","apiSavedNet","apiRecall","console","code","mtpInvokeApi","catch","promise","setUserAuth","userAuth","fullUserAuth","user_auth","server","api","app","publicKeys","schema","mtSchema","platform","apiConfig","serverConfig","TL","keyManager","Serialization","bind","apiManager","isAnyNetworker","storedBaseDc","baseDc","opts","nearestDc","wrapApiCall","nearest_dc","this_dc","mtpClearStorage","saveKeys","push","noPrefix","values","clear","restoreObj","forEach","key","i","value","undefined","ctx","keys","log","stack","Promise"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n// import UpdatesManager from '../updates'\n\nimport isNil from 'ramda/src/isNil'\nimport is from 'ramda/src/is'\nimport propEq from 'ramda/src/propEq'\nimport has from 'ramda/src/has'\nimport pathSatisfies from 'ramda/src/pathSatisfies'\nimport complement from 'ramda/src/complement'\n\nimport Logger from '../../util/log'\nconst debug = Logger`api-manager`\n\nimport Auth from '../authorizer'\nimport type { Args } from '../authorizer'\n\nimport blueDefer from '../../util/defer'\nimport { dTime } from '../time-manager'\nimport { chooseServer } from '../dc-configurator'\n\nimport KeyManager from '../rsa-keys-manger'\nimport { AuthKeyError } from '../../error'\n\nimport { bytesFromHex, bytesToHex } from '../../bin'\n\nimport type { TLFabric } from '../../tl'\nimport type { TLSchema } from '../../tl/index.h'\nimport { switchErrors } from './error-cases'\nimport { delayedCall } from '../../util/smart-timeout'\n\nimport Request from './request'\n\nimport type { Bytes, PublicKey, LeftOptions, AsyncStorage, Cache } from './index.h'\n\nimport type { ApiConfig, StrictConfig } from '../main/index.h'\n\nimport type { Networker } from '../networker'\n\nimport type { Emit, On } from '../main/index.h'\n\nconst hasPath = pathSatisfies( complement( isNil ) )\n\nconst baseDcID = 2\n\nconst Ln = (length, obj) => obj && propEq('length', length, obj)\n\n\n\nexport class ApiManager {\n  cache: Cache = {\n    uploader  : {},\n    downloader: {},\n    auth      : {},\n    servers   : {},\n    keysParsed: {}\n  }\n  apiConfig: ApiConfig\n  publicKeys: PublicKey[]\n  storage: AsyncStorage\n  TL: TLFabric\n  serverConfig: {}\n  schema: TLSchema\n  mtSchema: TLSchema\n  keyManager: Args\n  networkFabric: any\n  updatesManager: any\n  auth: any\n  on: On\n  emit: Emit\n  chooseServer: (dcID: number, upload?: boolean) => {}\n  constructor(config: StrictConfig, tls: TLFabric, netFabric: Function, { on, emit }: { on: On, emit: Emit }) {\n    const {\n      server,\n      api,\n      app: {\n        storage,\n        publicKeys\n      },\n      schema,\n      mtSchema,\n      platform\n    } = config\n    this.apiConfig = api\n    this.publicKeys = publicKeys\n    this.storage = storage\n    this.serverConfig = server\n    this.schema = schema\n    this.mtSchema = mtSchema\n    this.platform = platform\n    this.chooseServer = chooseServer(this.cache.servers, server)\n    this.on = on\n    this.emit = emit\n    this.TL = tls\n    this.keyManager = KeyManager(this.TL.Serialization, publicKeys, this.cache.keysParsed)\n    this.auth = Auth(this.TL, this.keyManager, this.platform)\n    this.networkFabric = netFabric(this.chooseServer)\n    this.mtpInvokeApi = this.mtpInvokeApi.bind(this)\n    this.mtpGetNetworker = this.mtpGetNetworker.bind(this)\n    const apiManager = this.mtpInvokeApi\n    apiManager.setUserAuth = this.setUserAuth\n    apiManager.on = this.on\n    apiManager.emit = this.emit\n    apiManager.storage = storage\n\n    // this.updatesManager = UpdatesManager(apiManager)\n    // apiManager.updates = this.updatesManager\n\n    return apiManager\n  }\n  networkSetter = (dc: number, options: LeftOptions) =>\n    (authKey: Bytes, serverSalt: Bytes): Networker => {\n      const networker = this.networkFabric(dc, authKey, serverSalt, options)\n      this.cache.downloader[dc] = networker\n      return networker\n    }\n  mtpGetNetworker = async (dcID: number, options: LeftOptions = {}) => {\n    // const isUpload = options.fileUpload || options.fileDownload\n    // const cache = isUpload ? this.cache.uploader : this.cache.downloader\n\n    const cache = this.cache.downloader\n    if (!dcID) throw new Error('get Networker without dcID')\n\n    if (has(dcID, cache)) return cache[dcID]\n\n    const akk = `dc${  dcID  }_auth_key`\n    const ssk = `dc${  dcID  }_server_salt`\n\n    const dcUrl = this.chooseServer(dcID, false)\n\n    const networkSetter = this.networkSetter(dcID, options)\n\n    const authKeyHex = await this.storage.get(akk)\n    let serverSaltHex = await this.storage.get(ssk)\n\n    if (cache[dcID]) return cache[dcID]\n\n    if (Ln(512, authKeyHex)) {\n      if (!serverSaltHex || serverSaltHex.length !== 16)\n        serverSaltHex = 'AAAAAAAAAAAAAAAA'\n      const authKey = bytesFromHex(authKeyHex)\n      const serverSalt = bytesFromHex(serverSaltHex)\n\n      return networkSetter(authKey, serverSalt)\n    }\n\n    if (!options.createNetworker)\n      throw new AuthKeyError()\n\n    let auth\n    try {\n      auth = await this.auth(dcID, this.cache.auth, dcUrl)\n    } catch (error) {\n      return netError(error)\n    }\n\n    const { authKey, serverSalt } = auth\n\n    await this.storage.set(akk, bytesToHex(authKey))\n    await this.storage.set(ssk, bytesToHex(serverSalt))\n\n    return networkSetter(authKey, serverSalt)\n  }\n  async initConnection() {\n    if (!isAnyNetworker(this)) {\n      const storedBaseDc = await this.storage.get('dc')\n      const baseDc = storedBaseDc || baseDcID\n      const opts = {\n        dcID           : baseDc,\n        createNetworker: true\n      }\n      const networker = await this.mtpGetNetworker(baseDc, opts)\n      const nearestDc = await networker.wrapApiCall(\n        'help.getNearestDc', {}, opts)\n      const { nearest_dc, this_dc } = nearestDc\n      await this.storage.set('dc', nearest_dc)\n      debug(`nearest Dc`)('%O', nearestDc)\n      if (nearest_dc !== this_dc) await this.mtpGetNetworker(nearest_dc, { createNetworker: true })\n    }\n  }\n  mtpInvokeApi = async (method: string, params: Object, options: LeftOptions = {}) => {\n    const deferred = blueDefer()\n    const rejectPromise = (error: any) => {\n      let err\n      if (!error)\n        err = { type: 'ERROR_EMPTY', input: '' }\n      else if (!is(Object, error))\n        err = { message: error }\n      else err = error\n      deferred.reject(err)\n\n      if (!options.noErrorBox) {\n        //TODO weird code. `error` changed after `.reject`?\n\n        /*err.input = method\n\n        err.stack =\n          stack ||\n          hasPath(['originalError', 'stack'], error) ||\n          error.stack ||\n          (new Error()).stack*/\n        this.emit('error.invoke', error)\n      }\n    }\n\n    await this.initConnection()\n\n    const requestThunk = waitTime => delayedCall(req.performRequest, +waitTime * 1e3)\n\n    const dcID = options.dcID\n      ? options.dcID\n      : await this.storage.get('dc')\n\n    const networker = await this.mtpGetNetworker(dcID, options)\n\n    const cfg = {\n      networker,\n      dc          : dcID,\n      storage     : this.storage,\n      getNetworker: this.mtpGetNetworker,\n      netOpts     : options\n    }\n    const req = new Request(cfg, method, params)\n\n\n    req.performRequest()\n      .then(\n        deferred.resolve,\n        error => {\n          const deferResolve = deferred.resolve\n          const apiSavedNet = () => networker\n          const apiRecall = networker => {\n            req.config.networker = networker\n            return req.performRequest()\n          }\n          console.error(dTime(), 'Error', error.code, error.type, baseDcID, dcID)\n\n          return switchErrors(error, options, dcID, baseDcID)(\n            error, options, dcID, this.emit, rejectPromise, requestThunk,\n            apiSavedNet, apiRecall, deferResolve, this.mtpInvokeApi,\n            this.storage)\n        })\n      .catch(rejectPromise)\n\n    return deferred.promise\n  }\n\n  setUserAuth = (dcID: number, userAuth: any) => {\n    const fullUserAuth = { dcID, ...userAuth }\n    this.storage.set({\n      dc       : dcID,\n      user_auth: fullUserAuth\n    })\n    this.emit('auth.dc', { dc: dcID, auth: userAuth })\n  }\n  async mtpClearStorage() {\n    const saveKeys = []\n    for (let dcID = 1; dcID <= 5; dcID++) {\n      saveKeys.push(`dc${  dcID  }_auth_key`)\n      saveKeys.push(`t_dc${  dcID  }_auth_key`)\n    }\n    this.storage.noPrefix() //TODO Remove noPrefix\n\n    const values = await this.storage.get(...saveKeys)\n\n    await this.storage.clear()\n\n    const restoreObj = {}\n    saveKeys.forEach((key, i) => {\n      const value = values[i]\n      if (value !== false && value !== undefined)\n        restoreObj[key] = value\n    })\n    this.storage.noPrefix()\n\n    return this.storage.set(restoreObj) //TODO definitely broken\n  }\n}\n\nconst isAnyNetworker = (ctx: ApiManager) => Object.keys(ctx.cache.downloader).length > 0\n\nconst netError = error => {\n  console.log('Get networker error', error, error.stack)\n  return Promise.reject(error)\n}\n"]}