{"version":3,"sources":["../../../src/service/api-manager/index.js"],"names":["debug","Logger","hasPath","isNil","Ln","length","obj","ApiManager","constructor","config","tls","netFabric","on","emit","cache","uploader","downloader","auth","servers","keysParsed","fixupDc","dcID","console","log","baseDcID","networkSetter","dc","options","authKey","serverSalt","JSON","stringify","networker","networkFabric","fileUpload","fileDownload","Error","isUpload","undefined","akk","ssk","authKeyHex","storage","get","serverSaltHex","createNetworker","AuthKeyError","dcUrl","chooseServer","error","netError","set","mtpGetNetworker","method","params","deferred","rejectPromise","err","type","input","Object","message","reject","noErrorBox","initConnection","requestThunk","req","performRequest","waitTime","cfg","getNetworker","netOpts","Request","then","resolve","deferResolve","apiSavedNet","apiRecall","code","mtpInvokeApi","catch","promise","setUserAuth","userAuth","fullUserAuth","user_auth","server","api","app","publicKeys","schema","mtSchema","apiConfig","serverConfig","TL","keyManager","Serialization","bind","apiManager","requestPulls","requestActives","existsNetworkers","isAnyNetworker","keys","storedBaseDc","baseDc","opts","nearestDc","wrapApiCall","nearest_dc","this_dc","mtpClearStorage","saveKeys","push","noPrefix","values","clear","restoreObj","forEach","key","i","value","ctx","stack","Promise"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n// import UpdatesManager from '../updates'\n\nimport isNil from 'ramda/src/isNil'\nimport is from 'ramda/src/is'\nimport propEq from 'ramda/src/propEq'\nimport has from 'ramda/src/has'\nimport pathSatisfies from 'ramda/src/pathSatisfies'\nimport complement from 'ramda/src/complement'\n\nimport Logger from '../../util/log'\nconst debug = Logger`api-manager`\n\nimport Auth from '../authorizer'\nimport type { Args } from '../authorizer'\n\nimport blueDefer from '../../util/defer'\nimport { dTime } from '../time-manager'\nimport { chooseServer } from '../dc-configurator'\n\nimport KeyManager from '../rsa-keys-manger'\nimport { AuthKeyError } from '../../error'\n\nimport { bytesFromHex, bytesToHex } from '../../bin'\n\nimport type { TLFabric } from '../../tl'\nimport type { TLSchema } from '../../tl/index.h'\nimport { switchErrors } from './error-cases'\nimport { delayedCall } from '../../util/smart-timeout'\n\nimport Request from './request'\n\nimport type { Bytes, PublicKey, LeftOptions, AsyncStorage, Cache } from './index.h'\n\nimport type { ApiConfig, StrictConfig } from '../main/index.h'\n\nimport type { Networker } from '../networker'\n\nimport type { Emit, On } from '../main/index.h'\n\nconst hasPath = pathSatisfies( complement( isNil ) )\n\nconst Ln = (length, obj) => obj && propEq('length', length, obj)\n\nexport class ApiManager {\n  cache: Cache = {\n    uploader  : {},\n    downloader: {},\n    auth      : {},\n    servers   : {},\n    keysParsed: {}\n  }\n  apiConfig: ApiConfig\n  publicKeys: PublicKey[]\n  storage: AsyncStorage\n  TL: TLFabric\n  serverConfig: {}\n  schema: TLSchema\n  mtSchema: TLSchema\n  keyManager: Args\n  networkFabric: any\n  updatesManager: any\n  auth: any\n  on: On\n  emit: Emit\n  chooseServer: (dcID: number, upload?: boolean) => {}\n  constructor(config: StrictConfig, tls: TLFabric, netFabric: Function, { on, emit }: { on: On, emit: Emit }) {\n    const {\n      server,\n      api,\n      app: {\n        storage,\n        publicKeys\n      },\n      schema,\n      mtSchema\n    } = config\n    this.apiConfig = api\n    this.publicKeys = publicKeys\n    this.storage = storage\n    this.serverConfig = server\n    this.schema = schema\n    this.mtSchema = mtSchema\n    this.chooseServer = chooseServer(this.cache.servers, server)\n    this.on = on\n    this.emit = emit\n    this.TL = tls\n    this.keyManager = KeyManager(this.TL.Serialization, publicKeys, this.cache.keysParsed)\n    this.auth = Auth(this.TL, this.keyManager)\n    this.networkFabric = netFabric(this.chooseServer)\n    this.mtpInvokeApi = this.mtpInvokeApi.bind(this)\n    this.mtpGetNetworker = this.mtpGetNetworker.bind(this)\n    const apiManager = this.mtpInvokeApi\n    apiManager.setUserAuth = this.setUserAuth\n    apiManager.on = this.on\n    apiManager.emit = this.emit\n    apiManager.storage = storage\n    this.requestPulls = {}\n    this.requestActives = {}\n    this.baseDcID = 2\n\n    // this.updatesManager = UpdatesManager(apiManager)\n    // apiManager.updates = this.updatesManager\n\n    return apiManager\n  }\n  \n  fixupDc = (dcID) => {\n    console.log('[fixupDc] current:', this.baseDcID, 'candidate:', dcID)\n    this.baseDcID = dcID\n  }\n\n  networkSetter = (dc: number, options: LeftOptions) =>\n    (authKey: Bytes, serverSalt: Bytes): Networker => {\n      console.log('[networkSetter] options:', JSON.stringify(options))\n      const networker = this.networkFabric(dc, authKey, serverSalt, options),\n        cache = (options.fileUpload || options.fileDownload)\n                ? this.cache.uploader\n                : this.cache.downloader\n\n      return cache[dc] = networker\n    }\n  mtpGetNetworker = async (dcID: number, options: LeftOptions = {}) => {\n    if (!dcID) throw new Error('get Networker without dcID')\n\n    const isUpload = options.fileUpload || options.fileDownload || false\n    const cache = isUpload ? this.cache.uploader : this.cache.downloader\n    //const cache = this.cache.downloader\n    console.log('[MtpGetNetworker:0] dcID:', dcID, JSON.stringify(options), isUpload)\n    console.log('[MtpGetNetworker:1] cache:', cache[dcID])\n    if (cache[dcID] !== undefined) return cache[dcID]\n\n    const networkSetter = this.networkSetter(dcID, options)\n\n    const akk = `dc${dcID}_auth_key`\n    const ssk = `dc${dcID}_server_salt`\n\n    const authKeyHex = await this.storage.get(akk)\n    let serverSaltHex = await this.storage.get(ssk)\n\n    if (cache[dcID]) return cache[dcID]\n\n    if (authKeyHex && authKeyHex.length == 512) {\n      if (!serverSaltHex || serverSaltHex.length != 16) {\n        serverSaltHex = 'AAAAAAAAAAAAAAAA'\n      }\n      const authKey = bytesFromHex(authKeyHex)\n      const serverSalt = bytesFromHex(serverSaltHex)\n\n      console.log('[MtpGetNetworker:2] call network fabric:', dcID, authKey, serverSalt, JSON.stringify(options))\n      return cache[dcID] = this.networkFabric(dcID, authKey, serverSalt, options)\n      //return networkSetter(authKey, serverSalt)\n    }\n\n    if (!options.createNetworker) throw new AuthKeyError()\n\n    console.log('[MtpGetNetworker:3] auth...')\n    let auth\n    try {\n      const dcUrl = this.chooseServer(dcID, options.fileDownload || options.fileUpload)\n      console.log('[MtpGetNetworker:4] dcUrl:', dcUrl)\n      auth = await this.auth(dcID, this.cache.auth, dcUrl)\n      console.log('[MtpGetNetworker:5] auth completed:', auth)\n      this.baseDcID = dcID\n    } catch (error) {\n      return netError(error)\n    }\n    console.log('[MtpGetNetworker:6] auth passed')\n\n    const { authKey, serverSalt } = auth\n\n    await this.storage.set(akk, bytesToHex(authKey))\n    await this.storage.set(ssk, bytesToHex(serverSalt))\n\n    //return networkSetter(authKey, serverSalt)\n    console.log('[MtpGetNetworker:7] call network fabric:', dcID, authKey, serverSalt, JSON.stringify(options))\n    return cache[dcID] = this.networkFabric(dcID, authKey, serverSalt, options)\n  }\n  async initConnection() {\n    const existsNetworkers = isAnyNetworker(this)\n    console.log('[initConnection] check exists any networker:', existsNetworkers, Object.keys(this.cache.downloader))\n    if (!existsNetworkers) {\n      const storedBaseDc = await this.storage.get('dc')\n      console.log('[initConnection] got dc:', storedBaseDc, ', default:', this.baseDcID)\n      const baseDc = storedBaseDc || this.baseDcID\n      const opts = {\n        dcID: baseDc,\n        createNetworker: true\n      }\n      const networker = await this.mtpGetNetworker(baseDc, opts)\n      const nearestDc = await networker.wrapApiCall('help.getNearestDc', {}, opts)\n      const { nearest_dc, this_dc } = nearestDc\n      console.log('[initConnection] help.getNearestDc:', nearest_dc, this_dc)\n      await this.storage.set('dc', nearest_dc)\n      //this.baseDcID = nearest_dc\n      debug(`nearest Dc`)('%O', nearestDc)\n      console.log('[initConnection] is nearest is not this:', nearest_dc !== this_dc)\n      if (nearest_dc !== this_dc) {\n        console.log('[initConnection] if nearest_dc!=this_dc then create networker for dcID', nearest_dc)\n        await this.mtpGetNetworker(nearest_dc, { createNetworker: true })\n      }\n    }\n  }\n  mtpInvokeApi = async (method: string, params: Object, options: LeftOptions = {}) => {\n    console.log('[mtpInvokeApi]', method, JSON.stringify(params), JSON.stringify(options))\n    if (!options.dcID) options.dcID = await this.storage.get('dc') || this.baseDcID\n    const deferred = blueDefer()\n    const rejectPromise = (error: any) => {\n      let err\n      if (!error)\n        err = { type: 'ERROR_EMPTY', input: '' }\n      else if (!is(Object, error))\n        err = { message: error }\n      else err = error\n      deferred.reject(err)\n\n      if (!options.noErrorBox) {\n        //TODO weird code. `error` changed after `.reject`?\n\n        /*err.input = method\n\n        err.stack =\n          stack ||\n          hasPath(['originalError', 'stack'], error) ||\n          error.stack ||\n          (new Error()).stack*/\n        this.emit('error.invoke', error)\n      }\n    }\n\n    console.log('[mtpInvokeApi] initConnection...')\n    await this.initConnection()\n    console.log('[mtpInvokeApi] initConnection passed')\n\n    const requestThunk = waitTime => delayedCall(req.performRequest, +waitTime * 1e3)\n\n    const dcID = options.dcID\n      ? options.dcID || this.baseDcID\n      : await this.storage.get('dc') || 2\n\n    /*\n     ! add dc to options??\n     */\n    console.log('[mtpInvokeApi] get networker with dcID', dcID, ' and options', JSON.stringify(options))\n    const networker = await this.mtpGetNetworker(dcID, options)\n    console.log('[mtpInvokeApi] got networker:', networker)\n\n    const cfg = {\n      networker,\n      dc          : dcID,\n      storage     : this.storage,\n      getNetworker: this.mtpGetNetworker,\n      netOpts     : options,\n      fixupDc: this.fixupDc\n    }\n    const req = new Request(cfg, method, params)\n\n    req.performRequest()\n      .then(\n        deferred.resolve,\n        error => {\n          const deferResolve = deferred.resolve\n          const apiSavedNet = () => networker\n          const apiRecall = networker => {\n            req.config.networker = networker\n            return req.performRequest()\n          }\n          console.error(dTime(), 'Error', error.code, error.type, this.baseDcID, dcID)\n\n          return switchErrors(error, options, dcID, this.baseDcID)(\n            error, options, dcID, this.emit, rejectPromise, requestThunk,\n            apiSavedNet, apiRecall, deferResolve, this.mtpInvokeApi,\n            this.storage)\n        }\n      )\n      .catch(rejectPromise)\n\n    return deferred.promise\n  }\n\n  setUserAuth = (dcID: number, userAuth: any) => {\n    const fullUserAuth = { dcID, ...userAuth }\n    this.storage.set({\n      dc       : dcID,\n      user_auth: fullUserAuth\n    })\n    this.emit('auth.dc', { dc: dcID, auth: userAuth })\n    this.baseDcID = dcID\n  }\n  async mtpClearStorage() {\n    const saveKeys = []\n    for (let dcID = 1; dcID <= 5; dcID++) {\n      saveKeys.push(`dc${  dcID  }_auth_key`)\n      saveKeys.push(`t_dc${  dcID  }_auth_key`)\n    }\n    this.storage.noPrefix() //TODO Remove noPrefix\n\n    const values = await this.storage.get(...saveKeys)\n\n    await this.storage.clear()\n\n    const restoreObj = {}\n    saveKeys.forEach((key, i) => {\n      const value = values[i]\n      if (value !== false && value !== undefined)\n        restoreObj[key] = value\n    })\n    this.storage.noPrefix()\n\n    return this.storage.set(restoreObj) //TODO definitely broken\n  }\n}\n\nconst isAnyNetworker = (ctx: ApiManager) => Object.keys(ctx.cache.downloader).length > 0\n\nconst netError = error => {\n  console.log('Get networker error', error, error.stack)\n  return Promise.reject(error)\n}\n"]}