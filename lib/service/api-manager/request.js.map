{"version":3,"sources":["../../../src/service/api-manager/request.js"],"names":["debug","Request","constructor","config","method","params","initNetworker","networker","getNetworker","netOpts","dc","then","saveNetworker","Promise","resolve","performRequest","requestWith","wrapApiCall","catch","code","error303","error420","bind","err","matched","type","match","length","reject","newDcID","waitTime","console","error"],"mappings":"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","file":"request.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n\nimport Logger from '../../util/log'\nconst debug = Logger([`request`])\n\nimport { MTError } from '../../error'\nimport { delayedCall } from '../../util/smart-timeout'\nimport type { NetworkerType, AsyncStorage, LeftOptions } from './index.h.js'\n\ntype Options = {|\n  networker?: NetworkerType,\n  dc: number,\n  storage: AsyncStorage,\n  getNetworker: (dcID: number, options: LeftOptions) => Promise<NetworkerType>,\n  netOpts: mixed\n|}\n\nclass Request {\n  method: string\n  params: { [arg: string]: mixed }\n  config: Options\n  constructor(config: Options, method: string, params?: Object = {}) {\n    this.config = config\n    this.method = method\n    this.params = params\n\n    this.performRequest = this.performRequest.bind(this)\n    //$FlowIssue\n    this.error303 = this.error303.bind(this)\n    //$FlowIssue\n    this.error420 = this.error420.bind(this)\n    this.initNetworker = this.initNetworker.bind(this)\n  }\n  initNetworker = (): Promise<NetworkerType> => {\n    if (!this.config.networker) {\n      const { getNetworker, netOpts, dc } = this.config\n      return getNetworker(dc, netOpts)\n        .then(this.saveNetworker)\n    }\n    return Promise.resolve(this.config.networker)\n  }\n  saveNetworker = (networker: NetworkerType) => this.config.networker = networker\n  performRequest = () => this.initNetworker().then(this.requestWith)\n  requestWith = (networker: NetworkerType) => networker\n    .wrapApiCall(this.method, this.params, this.config.netOpts)\n    .catch({ code: 303 }, this.error303)\n    .catch({ code: 420 }, this.error420)\n  error303(err: MTError) {\n    const matched = err.type.match(/^(PHONE_MIGRATE_|NETWORK_MIGRATE_|USER_MIGRATE_)(\\d+)/)\n    if (!matched || matched.length < 2) return Promise.reject(err)\n    const [ , , newDcID] = matched\n    if (+newDcID === this.config.dc) return Promise.reject(err)\n    this.config.dc = +newDcID\n    delete this.config.networker\n    /*if (this.config.dc)\n      this.config.dc = newDcID\n    else\n      await this.config.storage.set('dc', newDcID)*/\n    //TODO There is disabled ability to change default DC\n    //NOTE Shouldn't we must reassign current networker/cachedNetworker?\n    return this.performRequest()\n  }\n  error420(err: MTError) {\n    const matched = err.type.match(/^FLOOD_WAIT_(\\d+)/)\n    if (!matched || matched.length < 2) return Promise.reject(err)\n    const [ , waitTime ] = matched\n    console.error(`Flood error! It means that mtproto server bans you on ${waitTime} seconds`)\n    return +waitTime > 60\n      ? Promise.reject(err)\n      : delayedCall(this.performRequest, +waitTime * 1e3)\n  }\n}\n\nexport default Request"]}