{"version":3,"sources":["../../src/service/updates.js"],"names":["debug","Logger","AppChatsManager","a","b","pts","UpdatesManager","api","auth","storage","get","id","getUserID","update","_","processUpdate","saveUpdate","message","apiMessage","updatesState","pts_count","syncLoading","pendingSeqUpdates","pendingPtsUpdates","syncPending","clearTimeout","timeout","differenceResult","date","qts","seq","emit","channelsUpdates","other_updates","forEach","new_messages","nextState","intermediate_state","state","getDifference","channelID","channelState","getChannelState","channel","getChannelInput","filter","limit","channelStates","channel_id","length","map","pFlags","getChannelDifference","processUpdateMessage","stateResult","noErrorBox","setTimeout","attach","myID","then","popPendingSeqUpdate","nextSeq","pendingUpdatesData","updates","seqAwaiting","ptsAwaiting","popPendingPtsUpdate","curState","sort","curPts","goodPts","goodIndex","i","slice","splice","forceGetDifference","updateMessage","processOpts","seqStart","seq_start","isOut","flags","fromID","from_id","user_id","toID","chat_id","addChannelState","Error","undefined","options","to_id","popPts","popSeq","newPts","push"],"mappings":"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","file":"updates.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\nimport Logger from '../util/log'\nconst debug = Logger`updates`\n\nimport { setUpdatesProcessor } from './networker'\nimport type { ApiManagerInstance } from './api-manager/index.h'\nimport type { UpdatesState, CurState } from './updates.h'\n\n// const AppPeersManager = null\n// const AppUsersManager = null\nconst AppChatsManager = null\n\nconst UpdatesManager = (api: ApiManagerInstance) => {\n  const updatesState: any = {\n    pendingPtsUpdates: [],\n    pendingSeqUpdates: {},\n    syncPending      : false,\n    syncLoading      : true\n  }\n  const channelStates = {}\n\n  let myID = 0\n  getUserID().then(id => myID = id)\n\n  async function getUserID() {\n    const auth = await api.storage.get('user_auth')\n    return auth.id || 0\n  }\n\n  function popPendingSeqUpdate() {\n    const nextSeq = updatesState.seq + 1\n    const pendingUpdatesData = updatesState.pendingSeqUpdates[nextSeq]\n    if (!pendingUpdatesData) {\n      return false\n    }\n    const updates = pendingUpdatesData.updates\n    updates.forEach(saveUpdate)\n    updatesState.seq = pendingUpdatesData.seq\n    if (pendingUpdatesData.date && updatesState.date < pendingUpdatesData.date) {\n      updatesState.date = pendingUpdatesData.date\n    }\n    delete updatesState.pendingSeqUpdates[nextSeq]\n\n    if (!popPendingSeqUpdate() &&\n      updatesState.syncPending &&\n      updatesState.syncPending.seqAwaiting &&\n      updatesState.seq >= updatesState.syncPending.seqAwaiting) {\n      if (!updatesState.syncPending.ptsAwaiting) {\n        clearTimeout(updatesState.syncPending.timeout)\n        updatesState.syncPending = false\n      } else {\n        delete updatesState.syncPending.seqAwaiting\n      }\n    }\n\n    return true\n  }\n\n  function popPendingPtsUpdate(channelID) {\n    const curState = channelID ? getChannelState(channelID) : updatesState\n    if (!curState.pendingPtsUpdates.length) {\n      return false\n    }\n    curState.pendingPtsUpdates.sort((a, b) => a.pts - b.pts)\n\n    let curPts = curState.pts\n    let goodPts = false\n    let goodIndex = 0\n    let update\n    let i = 0\n    for (const update of curState.pendingPtsUpdates) {\n      curPts += update.pts_count\n      if (curPts >= update.pts) {\n        goodPts = update.pts\n        goodIndex = i\n      }\n      i++\n    }\n\n    if (!goodPts) {\n      return false\n    }\n\n    debug('pop pending pts updates')(goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1))\n\n    curState.pts = goodPts\n    for (let i = 0; i <= goodIndex; i++) {\n      update = curState.pendingPtsUpdates[i]\n      saveUpdate(update)\n    }\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1)\n\n    if (!curState.pendingPtsUpdates.length && curState.syncPending) {\n      if (!curState.syncPending.seqAwaiting) {\n        clearTimeout(curState.syncPending.timeout)\n        curState.syncPending = false\n      } else {\n        delete curState.syncPending.ptsAwaiting\n      }\n    }\n\n    return true\n  }\n\n  function forceGetDifference() {\n    if (!updatesState.syncLoading) {\n      getDifference()\n    }\n  }\n\n  function processUpdateMessage(updateMessage: any) {\n    // return forceGetDifference()\n    const processOpts = {\n      date    : updateMessage.date,\n      seq     : updateMessage.seq,\n      seqStart: updateMessage.seq_start\n    }\n\n    switch (updateMessage._) {\n      case 'updatesTooLong':\n      case 'new_session_created':\n        forceGetDifference()\n        break\n\n      case 'updateShort':\n        processUpdate(updateMessage.update, processOpts)\n        break\n\n      case 'updateShortMessage':\n      case 'updateShortChatMessage': {\n        const isOut = updateMessage.flags & 2\n        const fromID = updateMessage.from_id || (isOut ? myID : updateMessage.user_id)\n        const toID = updateMessage.chat_id\n          ? -updateMessage.chat_id\n          : isOut ? updateMessage.user_id : myID\n        \n        api.emit('updateShortMessage', { \n          processUpdate,\n          processOpts,\n          updateMessage,\n          fromID,\n          toID\n        })\n      }\n        break\n\n      case 'updatesCombined':\n      case 'updates': \n        api.emit('apiUpdate', updateMessage)\n\n        updateMessage.updates.forEach(update => {\n          processUpdate(update, processOpts)\n        })\n        break\n\n      default:\n        debug('Unknown update message')(updateMessage)\n    }\n  }\n\n  async function getDifference() {\n    if (!updatesState.syncLoading) {\n      updatesState.syncLoading = true\n      updatesState.pendingSeqUpdates = {}\n      updatesState.pendingPtsUpdates = []\n    }\n\n    if (updatesState.syncPending) {\n      clearTimeout(updatesState.syncPending.timeout)\n      updatesState.syncPending = false\n    }\n\n    const differenceResult = await api('updates.getDifference', {\n      pts : updatesState.pts,\n      date: updatesState.date,\n      qts : -1\n    })\n    if (differenceResult._ === 'updates.differenceEmpty') {\n      debug('apply empty diff')(differenceResult.seq)\n      updatesState.date = differenceResult.date\n      updatesState.seq = differenceResult.seq\n      updatesState.syncLoading = false\n      api.emit('stateSynchronized')\n      return false\n    }\n\n    api.emit('difference', differenceResult)\n\n    // Should be first because of updateMessageID\n    // console.log(dT(), 'applying', differenceResult.other_updates.length, 'other updates')\n\n    const channelsUpdates = []\n    differenceResult.other_updates.forEach(update => {\n      switch (update._) {\n        case 'updateChannelTooLong':\n        case 'updateNewChannelMessage':\n        case 'updateEditChannelMessage':\n          processUpdate(update)\n          return\n      }\n      saveUpdate(update)\n    })\n\n    // console.log(dT(), 'applying', differenceResult.new_messages.length, 'new messages')\n    differenceResult.new_messages.forEach(apiMessage => {\n      saveUpdate({\n        _        : 'updateNewMessage',\n        message  : apiMessage,\n        pts      : updatesState.pts,\n        pts_count: 0\n      })\n    })\n\n    const nextState = differenceResult.intermediate_state || differenceResult.state\n    updatesState.seq = nextState.seq\n    updatesState.pts = nextState.pts\n    updatesState.date = nextState.date\n\n    // console.log(dT(), 'apply diff', updatesState.seq, updatesState.pts)\n\n    if (differenceResult._ == 'updates.differenceSlice') {\n      getDifference()\n    } else {\n      // console.log(dT(), 'finished get diff')\n      api.emit('stateSynchronized')\n      updatesState.syncLoading = false\n    }\n  }\n\n  async function getChannelDifference(channelID: number) {\n    const channelState = getChannelState(channelID)\n    if (!channelState.syncLoading) {\n      channelState.syncLoading = true\n      channelState.pendingPtsUpdates = []\n    }\n    if (channelState.syncPending) {\n      clearTimeout(channelState.syncPending.timeout)\n      channelState.syncPending = false\n    }\n    // console.log(dT(), 'Get channel diff', AppChatsManager.getChat(channelID), channelState.pts)\n    const differenceResult = await api('updates.getChannelDifference', {\n      channel: AppChatsManager.getChannelInput(channelID),\n      filter : { _: 'channelMessagesFilterEmpty' },\n      pts    : channelState.pts,\n      limit  : 30\n    })\n    // console.log(dT(), 'channel diff result', differenceResult)\n    channelState.pts = differenceResult.pts\n\n    if (differenceResult._ == 'updates.channelDifferenceEmpty') {\n      debug('apply channel empty diff')(differenceResult)\n      channelState.syncLoading = false\n      api.emit('stateSynchronized')\n      return false\n    }\n\n    if (differenceResult._ == 'updates.channelDifferenceTooLong') {\n      debug('channel diff too long')(differenceResult)\n      channelState.syncLoading = false\n      delete channelStates[channelID]\n      saveUpdate({ _: 'updateChannelReload', channel_id: channelID })\n      return false\n    }\n\n    api.emit('difference', differenceResult)\n\n    // Should be first because of updateMessageID\n    debug('applying')(differenceResult.other_updates.length, 'channel other updates')\n    differenceResult.other_updates.map(saveUpdate)\n\n    debug('applying')(differenceResult.new_messages.length, 'channel new messages')\n    differenceResult.new_messages.forEach(apiMessage => {\n      saveUpdate({\n        _        : 'updateNewChannelMessage',\n        message  : apiMessage,\n        pts      : channelState.pts,\n        pts_count: 0\n      })\n    })\n\n    debug('apply channel diff')(channelState.pts)\n\n    if (differenceResult._ == 'updates.channelDifference' &&\n      !differenceResult.pFlags['final']) {\n      getChannelDifference(channelID)\n    } else {\n      debug('finished channel get diff')()\n      api.emit('stateSynchronized')\n      channelState.syncLoading = false\n    }\n  }\n\n  function addChannelState(channelID: number, pts: ?number) {\n    if (!pts) {\n      throw new Error(`Add channel state without pts ${channelID}`)\n    }\n    if (channelStates[channelID] === undefined) {\n      channelStates[channelID] = {\n        pts,\n        pendingPtsUpdates: [],\n        syncPending      : false,\n        syncLoading      : false\n      }\n      return true\n    }\n    return false\n  }\n\n  function getChannelState(channelID: number, pts?: ?number) {\n    if (channelStates[channelID] === undefined) {\n      addChannelState(channelID, pts)\n    }\n    return channelStates[channelID]\n  }\n\n  function processUpdate(update, options = {}) {\n    let channelID\n    switch (update._) {\n      case 'updateNewChannelMessage':\n      case 'updateEditChannelMessage':\n        channelID = update.message.to_id.channel_id || update.message.to_id.chat_id\n        break\n      case 'updateDeleteChannelMessages':\n        channelID = update.channel_id\n        break\n      case 'updateChannelTooLong':\n        channelID = update.channel_id\n        if (channelStates[channelID] === undefined) {\n          return false\n        }\n        break\n    }\n\n    const curState: CurState = channelID ? getChannelState(channelID, update.pts) : updatesState\n\n    // console.log(dT(), 'process', channelID, curState.pts, update)\n\n    if (curState.syncLoading) {\n      return false\n    }\n\n    if (update._ == 'updateChannelTooLong') {\n      getChannelDifference(channelID || 0)\n      return false\n    }\n\n    let popPts\n    let popSeq\n\n    if (update.pts) {\n      const newPts = curState.pts + (update.pts_count || 0)\n      if (newPts < update.pts) {\n        // debug('Pts hole')(curState, update, channelID && AppChatsManager.getChat(channelID))\n        curState.pendingPtsUpdates.push(update)\n        if (!curState.syncPending) {\n          curState.syncPending = {\n            timeout: setTimeout(() => {\n              if (channelID) {\n                getChannelDifference(channelID)\n              } else {\n                getDifference()\n              }\n            }, 5000),\n          }\n        }\n        curState.syncPending.ptsAwaiting = true\n        return false\n      }\n      if (update.pts > curState.pts) {\n        curState.pts = update.pts\n        popPts = true\n      }\n      else if (update.pts_count) {\n        // console.warn(dT(), 'Duplicate update', update)\n        return false\n      }\n      if (channelID && options.date && updatesState.date < options.date) {\n        updatesState.date = options.date\n      }\n    }\n    else if (!channelID && options.seq > 0) {\n      const seq = options.seq\n      const seqStart = options.seqStart || seq\n\n      if (seqStart != curState.seq + 1) {\n        if (seqStart > curState.seq) {\n          debug('Seq hole')(curState, curState.syncPending && curState.syncPending.seqAwaiting)\n\n          if (curState.pendingSeqUpdates[seqStart] === undefined) {\n            curState.pendingSeqUpdates[seqStart] = { seq, date: options.date, updates: [] }\n          }\n          curState.pendingSeqUpdates[seqStart].updates.push(update)\n\n          if (!curState.syncPending) {\n            curState.syncPending = {\n              timeout: setTimeout(() => {\n                getDifference()\n              }, 5000)\n            }\n          }\n          if (!curState.syncPending.seqAwaiting ||\n            curState.syncPending.seqAwaiting < seqStart) {\n            curState.syncPending.seqAwaiting = seqStart\n          }\n          return false\n        }\n      }\n\n      if (curState.seq != seq) {\n        curState.seq = seq\n        if (options.date && curState.date < options.date) {\n          curState.date = options.date\n        }\n        popSeq = true\n      }\n    }\n\n    saveUpdate(update)\n\n    if (popPts) {\n      popPendingPtsUpdate(channelID)\n    }\n    else if (popSeq) {\n      popPendingSeqUpdate()\n    }\n  }\n\n  function saveUpdate(update: any) {\n    api.emit('apiUpdate', update)\n  }\n\n  async function attach() {\n    setUpdatesProcessor(processUpdateMessage)\n    const stateResult: UpdatesState = await api('updates.getState', {}, { noErrorBox: true })\n    updatesState.seq = stateResult.seq\n    updatesState.pts = stateResult.pts\n    updatesState.date = stateResult.date\n    setTimeout(() => {\n      updatesState.syncLoading = false\n    }, 1000)\n  }\n\n  return {\n    processUpdateMessage,\n    addChannelState,\n    attach\n  }\n}\n\nexport default UpdatesManager"]}