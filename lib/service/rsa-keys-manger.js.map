{"version":3,"sources":["../../src/service/rsa-keys-manger.js"],"names":["KeyManager","Serialization","publisKeysHex","publicKeysParsed","prepared","Promise","map","mapPrepare","prepareRsaKeys","fingerprints","fingerprintHex","foundKey","fingerprint","selectRsaKeyByFingerPrint","modulus","exponent","RSAPublicKey","rsaBox","writer","WriteMediator","bytes","buffer","getBuffer","fingerprintBytes","slice","reverse","prepare","select"],"mappings":";;;;;;;AAEA;;;;AAMA;;AAEA;;;;;;AAIO,IAAMA,kCAAa,CAACC,aAAD,EACxBC,aADwB,EAExBC,gBAFwB,KAEgB;AAoBxC,oBAAgC;AAC9B,QAAIC,QAAJ,EAAc;;AAEd,UAAMC,mBAAQC,GAAR,CAAYJ,aAAZ,EAA2BK,UAA3B,CAAN;;AAEAH,eAAW,IAAX;AACD;;AA1BuC;AAAA;;AAAA,oBAoBzBI,cApByB;AAAA;AAAA;AAAA;;AA4BxC,kBAAyCC,YAAzC,EAAiE;AAC/D,UAAMD,gBAAN;;AAEA,QAAIE,uBAAJ;AAAA,QAAoBC,iBAApB;AACA,yBAA0BF,YAA1B,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA7BG,WAA6B;;AACtCF,uBAAiB,sBAAYE,WAAZ,CAAjB;AACAD,iBAAWR,iBAAiBO,cAAjB,CAAX;AACA,UAAIC,QAAJ,EACE,uBAASC,WAAT,IAAyBD,QAAzB;AACH;AACD,WAAO,KAAP;AACD;;AAvCuC;AAAA;;AAAA,oBA4BzBE,yBA5ByB;AAAA;AAAA;AAAA;;AACxC,MAAIT,WAAW,KAAf;;AAEA,MAAMG,aAAa,CAAC,EAAEO,OAAF,EAAWC,QAAX,EAAD,KAAsC;AACvD,QAAMC,eAAef,eAArB;AACA,QAAMgB,SAASD,aAAaE,MAA5B;AACAC,sBAAcC,KAAd,CAAoBH,MAApB,EAA4B,uBAAaH,OAAb,CAA5B,EAAmD,GAAnD;AACAK,sBAAcC,KAAd,CAAoBH,MAApB,EAA4B,uBAAaF,QAAb,CAA5B,EAAoD,GAApD;;AAEA,QAAMM,SAASJ,OAAOK,SAAP,EAAf;;AAEA,QAAMC,mBAAmB,wBAAcF,MAAd,EAAsBG,KAAtB,CAA4B,CAAC,CAA7B,CAAzB;AACAD,qBAAiBE,OAAjB;;AAEAtB,qBAAiB,qBAAWoB,gBAAX,CAAjB,IAAiD;AAC/CT,aAD+C;AAE/CC;AAF+C,KAAjD;AAID,GAfD;;AAsCA,SAAO;AACLW,aAASlB,cADJ;AAELmB,YAASd;AAFJ,GAAP;AAID,CA/CM;;kBAiDQb,U","file":"rsa-keys-manger.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n\nimport type { PublicKey } from './main/index.h'\nimport type { Cached } from './api-manager/index.h'\nimport type { SerializationFabric } from '../tl'\n\nimport { WriteMediator } from '../tl'\n\nimport { bytesToHex, sha1BytesSync,\n  bytesFromHex, strDecToHex } from '../bin'\n\n\nexport const KeyManager = (Serialization: SerializationFabric,\n  publisKeysHex: PublicKey[],\n  publicKeysParsed: Cached<PublicKey>) => {\n  let prepared = false\n\n  const mapPrepare = ({ modulus, exponent }: PublicKey) => {\n    const RSAPublicKey = Serialization()\n    const rsaBox = RSAPublicKey.writer\n    WriteMediator.bytes(rsaBox, bytesFromHex(modulus), 'n')\n    WriteMediator.bytes(rsaBox, bytesFromHex(exponent), 'e')\n\n    const buffer = rsaBox.getBuffer()\n\n    const fingerprintBytes = sha1BytesSync(buffer).slice(-8)\n    fingerprintBytes.reverse()\n\n    publicKeysParsed[bytesToHex(fingerprintBytes)] = {\n      modulus,\n      exponent\n    }\n  }\n\n  async function prepareRsaKeys() {\n    if (prepared) return\n\n    await Promise.map(publisKeysHex, mapPrepare)\n\n    prepared = true\n  }\n\n  async function selectRsaKeyByFingerPrint(fingerprints: string[]) {\n    await prepareRsaKeys()\n\n    let fingerprintHex, foundKey\n    for (const fingerprint of fingerprints) {\n      fingerprintHex = strDecToHex(fingerprint)\n      foundKey = publicKeysParsed[fingerprintHex]\n      if (foundKey)\n        return { fingerprint, ...foundKey }\n    }\n    return false\n  }\n\n  return {\n    prepare: prepareRsaKeys,\n    select : selectRsaKeyByFingerPrint\n  }\n}\n\nexport default KeyManager\n"]}